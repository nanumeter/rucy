{"version":3,"sources":["../../../src/components/fields/DataSelector.js"],"names":["attributeIsData","meta","valType","arrayOk","UnconnectedDataSelector","props","context","updatePlot","bind","setLocals","nextProps","nextContext","dataSources","dataSourceOptions","srcAttr","attr","srcProperty","container","get","fullValue","srcConverters","toSrc","type","is2D","includes","value","updateContainer","update","data","Array","isArray","filter","v","map","fromSrc","label","newLabel","traceType","dataSourceOptionRenderer","dataSourceValueRenderer","propTypes","any","func","object","contextTypes","array","shape","isRequired","modifyPlotProps","plotProps","attrMeta","indexOf","isVisible"],"mappings":"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","file":"DataSelector.js","sourcesContent":["import DropdownWidget from '../widgets/Dropdown';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport Field from './Field';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {connectToContainer, maybeAdjustSrc, maybeTransposeData} from 'lib';\nimport {TRANSFORMS_LIST} from 'lib/constants';\n\nexport function attributeIsData(meta = {}) {\n  return meta.valType === 'data_array' || meta.arrayOk;\n}\n\nexport class UnconnectedDataSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.updatePlot = this.updatePlot.bind(this);\n    this.setLocals(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(props, context) {\n    this.dataSources = context.dataSources || {};\n    this.dataSourceOptions = context.dataSourceOptions || [];\n\n    this.srcAttr = props.attr + 'src';\n    this.srcProperty = nestedProperty(props.container, this.srcAttr).get();\n    this.fullValue = this.context.srcConverters\n      ? this.context.srcConverters.toSrc(this.srcProperty, props.container.type)\n      : this.srcProperty;\n\n    this.is2D = false;\n    if (props.container) {\n      this.is2D =\n        (props.attr === 'z' &&\n          [\n            'contour',\n            'contourgl',\n            'heatmap',\n            'heatmapgl',\n            'surface',\n            'carpet',\n            'contourcarpet',\n          ].includes(props.container.type)) ||\n        (props.container.type === 'table' && props.attr !== 'columnorder');\n    }\n  }\n\n  updatePlot(value) {\n    if (!this.props.updateContainer) {\n      return;\n    }\n\n    const update = {};\n    let data;\n\n    if (Array.isArray(value)) {\n      data = value\n        .filter(v => Array.isArray(this.dataSources[v]))\n        .map(v => this.dataSources[v]);\n    } else {\n      data = this.dataSources[value] || null;\n    }\n\n    update[this.props.attr] = maybeTransposeData(\n      data,\n      this.srcAttr,\n      this.props.container.type\n    );\n    update[this.srcAttr] = maybeAdjustSrc(\n      value,\n      this.srcAttr,\n      this.props.container.type,\n      {\n        fromSrc: this.context.srcConverters\n          ? this.context.srcConverters.fromSrc\n          : null,\n      }\n    );\n    this.props.updateContainer(update);\n  }\n\n  render() {\n    const {label} = this.props;\n    let newLabel;\n    if (typeof label === 'object') {\n      const traceType = this.props.container.type;\n      if (label[traceType]) {\n        newLabel = label[traceType];\n      } else {\n        newLabel = label['*'];\n      }\n    } else {\n      newLabel = label;\n    }\n\n    return (\n      <Field {...{...this.props, label: newLabel}}>\n        <DropdownWidget\n          options={this.dataSourceOptions}\n          value={this.fullValue}\n          onChange={this.updatePlot}\n          multi={this.is2D}\n          optionRenderer={this.context.dataSourceOptionRenderer}\n          valueRenderer={this.context.dataSourceValueRenderer}\n          clearable={true}\n        />\n      </Field>\n    );\n  }\n}\n\nUnconnectedDataSelector.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  container: PropTypes.object,\n  ...Field.propTypes,\n};\n\nUnconnectedDataSelector.contextTypes = {\n  dataSources: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n  dataSourceValueRenderer: PropTypes.func,\n  dataSourceOptionRenderer: PropTypes.func,\n  srcConverters: PropTypes.shape({\n    toSrc: PropTypes.func.isRequired,\n    fromSrc: PropTypes.func.isRequired,\n  }),\n};\n\nfunction modifyPlotProps(props, context, plotProps) {\n  if (\n    attributeIsData(plotProps.attrMeta) &&\n    (context.container &&\n      TRANSFORMS_LIST.indexOf(context.container.type) === -1)\n  ) {\n    plotProps.isVisible = true;\n  }\n}\n\nexport default connectToContainer(UnconnectedDataSelector, {modifyPlotProps});\n"]}