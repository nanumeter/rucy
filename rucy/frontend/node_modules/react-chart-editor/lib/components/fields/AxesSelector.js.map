{"version":3,"sources":["../../../src/components/fields/AxesSelector.js"],"names":["AxesSelector","props","context","axesTargetHandler","Error","axesTarget","_","localize","axesOptions","maxOptions","length","map","option","value","label","title","contextTypes","func","string","fullLayout","object","propTypes","array"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,Y;;;AACJ,wBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,4HACpBD,KADoB,EACbC,OADa;;AAG1B,QAAI,CAACA,QAAQC,iBAAb,EAAgC;AAC9B,YAAM,IAAIC,KAAJ,CACJ,kEADI,CAAN;AAGD;AAPyB;AAQ3B;;;;6BAEQ;AAAA,qBAC8C,KAAKF,OADnD;AAAA,UACAC,iBADA,YACAA,iBADA;AAAA,UACmBE,UADnB,YACmBA,UADnB;AAAA,UACyCC,CADzC,YAC+BC,QAD/B;AAAA,UAEAC,WAFA,GAEe,KAAKP,KAFpB,CAEAO,WAFA;;AAGP,UAAMC,aAAaD,YAAYE,MAAZ,GAAqB,CAAxC,CAHO,CAGoC;;AAE3C,UAAID,UAAJ,EAAgB;AACd,eACE;AAAA;AAAA,uBAAW,KAAKR,KAAhB,IAAuB,OAAOK,EAAE,eAAF,CAA9B;AACE;AACE,qBAASE,YAAYG,GAAZ,CAAgB,kBAAU;AACjC,kBAAIC,OAAOC,KAAP,KAAiB,SAArB,EAAgC;AAC9B,uBAAO;AACLC,yBAAOF,OAAOG,KADT;AAELF,yBAAOD,OAAOC;AAFT,iBAAP;AAID;;AAED,qBAAOD,MAAP;AACD,aATQ,CADX;AAWE,mBAAOP,UAXT;AAYE,sBAAUF,iBAZZ;AAaE,uBAAW;AAbb;AADF,SADF;AAmBD;;AAED,aACE;AAAA;AAAA,qBAAW,KAAKF,KAAhB,IAAuB,YAAvB;AACE;AACE,mBAASO,WADX;AAEE,wBAAcH,UAFhB;AAGE,0BAAgBF;AAHlB;AADF,OADF;AASD;;;;;;AAGHH,aAAagB,YAAb,GAA4B;AAC1Bb,qBAAmB,oBAAUc,IADH;AAE1BZ,cAAY,oBAAUa,MAFI;AAG1BC,cAAY,oBAAUC,MAHI;AAI1Bb,YAAU,oBAAUU;AAJM,CAA5B;;AAOAjB,aAAaqB,SAAb,GAAyB;AACvBb,eAAa,oBAAUc;AADA,CAAzB;;kBAIetB,Y","file":"AxesSelector.js","sourcesContent":["import Field from './Field';\nimport PropTypes from 'prop-types';\nimport Dropdown from '../widgets/Dropdown';\nimport RadioBlocks from '../widgets/RadioBlocks';\nimport React, {Component} from 'react';\n\nclass AxesSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    if (!context.axesTargetHandler) {\n      throw new Error(\n        'AxesSelector must be nested within a connectAxesToPlot component'\n      );\n    }\n  }\n\n  render() {\n    const {axesTargetHandler, axesTarget, localize: _} = this.context;\n    const {axesOptions} = this.props;\n    const maxOptions = axesOptions.length > 4; // eslint-disable-line\n\n    if (maxOptions) {\n      return (\n        <Field {...this.props} label={_('Axis to Style')}>\n          <Dropdown\n            options={axesOptions.map(option => {\n              if (option.value !== 'allaxes') {\n                return {\n                  label: option.title,\n                  value: option.value,\n                };\n              }\n\n              return option;\n            })}\n            value={axesTarget}\n            onChange={axesTargetHandler}\n            clearable={false}\n          />\n        </Field>\n      );\n    }\n\n    return (\n      <Field {...this.props} center>\n        <RadioBlocks\n          options={axesOptions}\n          activeOption={axesTarget}\n          onOptionChange={axesTargetHandler}\n        />\n      </Field>\n    );\n  }\n}\n\nAxesSelector.contextTypes = {\n  axesTargetHandler: PropTypes.func,\n  axesTarget: PropTypes.string,\n  fullLayout: PropTypes.object,\n  localize: PropTypes.func,\n};\n\nAxesSelector.propTypes = {\n  axesOptions: PropTypes.array,\n};\n\nexport default AxesSelector;\n"]}