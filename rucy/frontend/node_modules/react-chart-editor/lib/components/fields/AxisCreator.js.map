{"version":3,"sources":["../../../src/components/fields/AxisCreator.js"],"names":["UnconnectedNewAxisCreator","currentAxisId","props","fullContainer","attr","currentTraceIndex","index","context","fullData","some","d","updateContainer","onUpdate","fullLayout","charAt","_subplots","length","type","UPDATE_LAYOUT","payload","update","tracesNeedingAxisAdjustment","t","filter","Number","trace","slice","UPDATE_TRACES","axisAttrToAdjust","traceIndexes","icon","extraComponent","canAddAxis","updateAxis","label","options","recalcAxes","u","propTypes","string","array","bool","container","object","func","contextTypes","data","ConnectedNewAxisCreator","AxisCreator","isFirstTraceOfType","_","localize","axisType","controls","getOptions","map","axisId","value","forEach","push","toUpperCase","modifyPlotProps","plotProps","isVisible"],"mappings":"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","file":"AxisCreator.js","sourcesContent":["import Dropdown from './Dropdown';\nimport Info from './Info';\nimport PropTypes from 'prop-types';\nimport React, {Component, Fragment} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport Button from '../widgets/Button';\nimport {PlusIcon} from 'plotly-icons';\nimport {\n  connectToContainer,\n  traceTypeToAxisType,\n  getAxisTitle,\n  axisIdToAxisName,\n} from 'lib';\n\nclass UnconnectedNewAxisCreator extends Component {\n  canAddAxis() {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n    const currentTraceIndex = this.props.fullContainer.index;\n    return this.context.fullData.some(\n      d => d.index !== currentTraceIndex && d[this.props.attr] === currentAxisId\n    );\n  }\n\n  updateAxis() {\n    const {attr, updateContainer} = this.props;\n    const {onUpdate, fullLayout} = this.context;\n\n    updateContainer({\n      [attr]: attr.charAt(0) + (fullLayout._subplots[attr].length + 1),\n    });\n\n    if (attr === 'yaxis') {\n      onUpdate({\n        type: EDITOR_ACTIONS.UPDATE_LAYOUT,\n        payload: {\n          update: {\n            [`${attr + (fullLayout._subplots[attr].length + 1)}.side`]: 'right',\n            [`${attr +\n              (fullLayout._subplots[attr].length + 1)}.overlaying`]: 'y',\n          },\n        },\n      });\n    }\n\n    if (attr === 'xaxis') {\n      onUpdate({\n        type: EDITOR_ACTIONS.UPDATE_LAYOUT,\n        payload: {\n          update: {\n            [`${attr + (fullLayout._subplots[attr].length + 1)}.side`]: 'top',\n            [`${attr +\n              (fullLayout._subplots[attr].length + 1)}.overlaying`]: 'x',\n          },\n        },\n      });\n    }\n  }\n\n  recalcAxes(update) {\n    const currentAxisId = this.props.fullContainer[this.props.attr];\n\n    // When we select another axis, make sure no unused axes are left\n    const tracesNeedingAxisAdjustment = this.context.fullData.some(\n      t =>\n        t[this.props.attr] === currentAxisId &&\n        t.index !== this.props.fullContainer.index\n    )\n      ? null\n      : this.context.fullData.filter(\n          trace =>\n            Number(trace[this.props.attr].slice(1)) >\n            Number(currentAxisId.slice(1))\n        );\n\n    this.context.onUpdate({\n      type: EDITOR_ACTIONS.UPDATE_TRACES,\n      payload: {\n        tracesNeedingAxisAdjustment,\n        axisAttrToAdjust: this.props.attr,\n        update: {[this.props.attr]: update},\n        traceIndexes: [this.props.fullContainer.index],\n      },\n    });\n  }\n\n  render() {\n    const icon = <PlusIcon />;\n    const extraComponent = this.canAddAxis() ? (\n      <Button variant=\"no-text\" icon={icon} onClick={() => this.updateAxis()} />\n    ) : (\n      <Button variant=\"no-text--disabled\" icon={icon} onClick={() => {}} />\n    );\n\n    return (\n      <Dropdown\n        label={this.props.label}\n        attr={this.props.attr}\n        clearable={false}\n        options={this.props.options}\n        updatePlot={u => this.recalcAxes(u)}\n        extraComponent={extraComponent}\n      />\n    );\n  }\n}\n\nUnconnectedNewAxisCreator.propTypes = {\n  attr: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.array,\n  canAddAxis: PropTypes.bool,\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n  updateContainer: PropTypes.func,\n};\n\nUnconnectedNewAxisCreator.contextTypes = {\n  fullLayout: PropTypes.object,\n  data: PropTypes.array,\n  fullData: PropTypes.array,\n  onUpdate: PropTypes.func,\n};\n\nconst ConnectedNewAxisCreator = connectToContainer(UnconnectedNewAxisCreator);\n\nclass AxisCreator extends Component {\n  render() {\n    const isFirstTraceOfType =\n      this.context.data.filter(d => d.type === this.props.container.type)\n        .length === 1;\n\n    if (isFirstTraceOfType) {\n      return null;\n    }\n\n    const {fullLayout, localize: _} = this.context;\n    const axisType = traceTypeToAxisType(this.props.container.type);\n    const controls = [];\n\n    function getOptions(axisType) {\n      return fullLayout._subplots[axisType].map(axisId => ({\n        label: getAxisTitle(fullLayout[axisIdToAxisName(axisId)]),\n        value: axisId,\n      }));\n    }\n\n    // for the moment only cartesian subplots are supported\n    if (axisType === 'cartesian') {\n      ['xaxis', 'yaxis'].forEach((type, index) => {\n        controls.push(\n          <ConnectedNewAxisCreator\n            key={index}\n            attr={type}\n            label={type.charAt(0).toUpperCase() + ' Axis'}\n            options={getOptions(type)}\n          />\n        );\n      });\n    }\n\n    return (\n      <Fragment>\n        {controls}\n        <Info>\n          {_('You can style and position your axes in the Style > Axes Panel')}\n        </Info>\n      </Fragment>\n    );\n  }\n}\n\nAxisCreator.propTypes = {\n  container: PropTypes.object,\n  fullContainer: PropTypes.object,\n};\n\nAxisCreator.contextTypes = {\n  data: PropTypes.array,\n  fullData: PropTypes.array,\n  fullLayout: PropTypes.object,\n  localize: PropTypes.func,\n};\n\nexport default connectToContainer(AxisCreator, {\n  modifyPlotProps: (props, context, plotProps) => {\n    const {data} = context;\n    const {fullContainer} = plotProps;\n\n    plotProps.isVisible =\n      data.length > 1 &&\n      data[fullContainer.index] &&\n      traceTypeToAxisType(data[fullContainer.index].type) === 'cartesian';\n  },\n});\n"]}