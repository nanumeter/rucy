{"version":3,"sources":["../../../src/components/fields/ErrorBars.js"],"names":["ErrorBars","props","context","updatePlot","bind","value","fullValue","visible","symmetric","mode","_","localize","getMode","label","showCustomDataControl","type","attr","renderModeSelector","renderErrorBarControls","propTypes","string","object","func","contextTypes"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,S;;;AACJ,qBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,sHACpBD,KADoB,EACbC,OADa;;AAE1B,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AAF0B;AAG3B;;;;+BAEUC,K,EAAO;AAChB,UAAIA,UAAU,WAAd,EAA2B;AACzB,aAAKJ,KAAL,CAAWE,UAAX,cACK,KAAKF,KAAL,CAAWK,SADhB;AAEEC,mBAAS,IAFX;AAGEC,qBAAW;AAHb;AAKD;;AAED,UAAIH,UAAU,YAAd,EAA4B;AAC1B,aAAKJ,KAAL,CAAWE,UAAX,cACK,KAAKF,KAAL,CAAWK,SADhB;AAEEC,mBAAS,IAFX;AAGEC,qBAAW;AAHb;AAKD;;AAED,UAAIH,UAAU,QAAd,EAAwB;AACtB,aAAKJ,KAAL,CAAWE,UAAX,cACK,KAAKF,KAAL,CAAWK,SADhB;AAEEC,mBAAS;AAFX;AAID;AACF;;;8BAES;AACR,UAAIE,aAAJ;;AAEA,UAAI,CAAC,KAAKR,KAAL,CAAWK,SAAX,CAAqBC,OAA1B,EAAmC;AACjCE,eAAO,QAAP;AACD;;AAED,UACE,KAAKR,KAAL,CAAWK,SAAX,CAAqBC,OAArB,KACC,KAAKN,KAAL,CAAWK,SAAX,CAAqBE,SAArB,IACC,OAAO,KAAKP,KAAL,CAAWK,SAAX,CAAqBE,SAA5B,KAA0C,WAF5C,CADF,EAIE;AACA;AACA;AACA;AACA;AACAC,eAAO,WAAP;AACD;;AAED,UACE,KAAKR,KAAL,CAAWK,SAAX,CAAqBC,OAArB,IACA,KAAKN,KAAL,CAAWK,SAAX,CAAqBE,SAArB,KAAmC,KAFrC,EAGE;AACA;AACA;AACAC,eAAO,YAAP;AACD;;AAED,aAAOA,IAAP;AACD;;;yCAEoB;AAAA,UACFC,CADE,GACG,KAAKR,OADR,CACZS,QADY;;;AAGnB,aACE;AAAA;AAAA;AACE;AACE,qBAAU,QADZ;AAEE,0BAAgB,KAAKR,UAFvB;AAGE,wBAAc,KAAKS,OAAL,EAHhB;AAIE,mBAAS,CACP,EAACC,OAAOH,EAAE,WAAF,CAAR,EAAwBL,OAAO,WAA/B,EADO,EAEP,EAACQ,OAAOH,EAAE,YAAF,CAAR,EAAyBL,OAAO,YAAhC,EAFO,EAGP,EAACQ,OAAOH,EAAE,QAAF,CAAR,EAAqBL,OAAO,QAA5B,EAHO;AAJX;AADF,OADF;AAcD;;;6CAEwB;AAAA,UACNK,CADM,GACD,KAAKR,OADJ,CAChBS,QADgB;;AAEvB,UAAMF,OAAO,KAAKG,OAAL,EAAb;AACA,UAAME,wBAAwB,KAAKb,KAAL,CAAWK,SAAX,CAAqBS,IAArB,KAA8B,MAA5D;;AAEA,UAAIN,SAAS,WAAb,EAA0B;AACxB,eACE;AAAA;AAAA;AACE;AACE,mBAAOC,EAAE,YAAF,CADT;AAEE,kBAAS,KAAKT,KAAL,CAAWe,IAApB,UAFF;AAGE,qBAAS,CACP,EAACH,OAAOH,EAAE,GAAF,CAAR,EAAgBL,OAAO,SAAvB,EADO,EAEP,EAACQ,OAAOH,EAAE,UAAF,CAAR,EAAuBL,OAAO,UAA9B,EAFO,EAGP,EAACQ,OAAOH,EAAE,GAAF,CAAR,EAAgBL,OAAO,MAAvB,EAHO,EAIP,EAACQ,OAAOH,EAAE,MAAF,CAAR,EAAmBL,OAAO,MAA1B,EAJO;AAHX,YADF;AAWE,0DAAS,OAAOK,EAAE,OAAF,CAAhB,EAA4B,MAAS,KAAKT,KAAL,CAAWe,IAApB,WAA5B,GAXF;AAYGF,kCACC;AACE,mBAAOJ,EAAE,aAAF,CADT;AAEE,kBAAS,KAAKT,KAAL,CAAWe,IAApB;AAFF,YADD,GAKG;AAjBN,SADF;AAqBD;;AAED,UAAIP,SAAS,YAAb,EAA2B;AACzB,eACE;AAAA;AAAA;AACE;AACE,mBAAOC,EAAE,YAAF,CADT;AAEE,kBAAS,KAAKT,KAAL,CAAWe,IAApB,UAFF;AAGE,qBAAS,CACP,EAACH,OAAOH,EAAE,GAAF,CAAR,EAAgBL,OAAO,SAAvB,EADO,EAEP,EAACQ,OAAOH,EAAE,UAAF,CAAR,EAAuBL,OAAO,UAA9B,EAFO,EAGP,EAACQ,OAAOH,EAAE,MAAF,CAAR,EAAmBL,OAAO,MAA1B,EAHO;AAHX,YADF;AAUE,0DAAS,OAAOK,EAAE,OAAF,CAAhB,EAA4B,MAAS,KAAKT,KAAL,CAAWe,IAApB,WAA5B,GAVF;AAWE;AACE,mBAAON,EAAE,WAAF,CADT;AAEE,kBAAS,KAAKT,KAAL,CAAWe,IAApB;AAFF,YAXF;AAeGF,kCACC;AAAA;AAAA;AACE;AACE,qBAAOJ,EAAE,WAAF,CADT;AAEE,oBAAS,KAAKT,KAAL,CAAWe,IAApB;AAFF,cADF;AAKE;AACE,qBAAON,EAAE,WAAF,CADT;AAEE,oBAAS,KAAKT,KAAL,CAAWe,IAApB;AAFF;AALF,WADD,GAWG;AA1BN,SADF;AA8BD;;AAED,aAAO,IAAP;AACD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AACG,aAAKC,kBAAL,EADH;AAEG,aAAKC,sBAAL;AAFH,OADF;AAMD;;;;;;AAGHlB,UAAUmB,SAAV,GAAsB;AACpBH,QAAM,oBAAUI,MADI;AAEpBd,aAAW,oBAAUe,MAFD;AAGpBlB,cAAY,oBAAUmB;AAHF,CAAtB;;AAMAtB,UAAUuB,YAAV,GAAyB;AACvBZ,YAAU,oBAAUW;AADG,CAAzB;;kBAIe,6BAAmBtB,SAAnB,C","file":"ErrorBars.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {Component, Fragment} from 'react';\nimport {DataSelector, Radio, Numeric} from '../index';\nimport RadioBlocks from '../widgets/RadioBlocks';\nimport Field from './Field';\nimport {connectToContainer} from 'lib';\n\nclass ErrorBars extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.updatePlot = this.updatePlot.bind(this);\n  }\n\n  updatePlot(value) {\n    if (value === 'symmetric') {\n      this.props.updatePlot({\n        ...this.props.fullValue,\n        visible: true,\n        symmetric: true,\n      });\n    }\n\n    if (value === 'asymmetric') {\n      this.props.updatePlot({\n        ...this.props.fullValue,\n        visible: true,\n        symmetric: false,\n      });\n    }\n\n    if (value === 'hidden') {\n      this.props.updatePlot({\n        ...this.props.fullValue,\n        visible: false,\n      });\n    }\n  }\n\n  getMode() {\n    let mode;\n\n    if (!this.props.fullValue.visible) {\n      mode = 'hidden';\n    }\n\n    if (\n      this.props.fullValue.visible &&\n      (this.props.fullValue.symmetric ||\n        typeof this.props.fullValue.symmetric === 'undefined')\n    ) {\n      // when this.props.fullValue.type === 'sqrt',\n      // then this.props.fullValue.symmetric is undefined, but 'sqrt' is only\n      // applicable when we want symmetric error bars\n      // https://github.com/plotly/plotly.js/issues/2359\n      mode = 'symmetric';\n    }\n\n    if (\n      this.props.fullValue.visible &&\n      this.props.fullValue.symmetric === false\n    ) {\n      // it has to be explicitly set to false, because we don't want it to catch\n      // cases when it's undefined\n      mode = 'asymmetric';\n    }\n\n    return mode;\n  }\n\n  renderModeSelector() {\n    const {localize: _} = this.context;\n\n    return (\n      <Field>\n        <RadioBlocks\n          alignment=\"center\"\n          onOptionChange={this.updatePlot}\n          activeOption={this.getMode()}\n          options={[\n            {label: _('Symmetric'), value: 'symmetric'},\n            {label: _('Asymmetric'), value: 'asymmetric'},\n            {label: _('Hidden'), value: 'hidden'},\n          ]}\n        />\n      </Field>\n    );\n  }\n\n  renderErrorBarControls() {\n    const {localize: _} = this.context;\n    const mode = this.getMode();\n    const showCustomDataControl = this.props.fullValue.type === 'data';\n\n    if (mode === 'symmetric') {\n      return (\n        <Fragment>\n          <Radio\n            label={_('Error Type')}\n            attr={`${this.props.attr}.type`}\n            options={[\n              {label: _('%'), value: 'percent'},\n              {label: _('Constant'), value: 'constant'},\n              {label: _('âˆš'), value: 'sqrt'},\n              {label: _('Data'), value: 'data'},\n            ]}\n          />\n          <Numeric label={_('Value')} attr={`${this.props.attr}.value`} />\n          {showCustomDataControl ? (\n            <DataSelector\n              label={_('Custom Data')}\n              attr={`${this.props.attr}.array`}\n            />\n          ) : null}\n        </Fragment>\n      );\n    }\n\n    if (mode === 'asymmetric') {\n      return (\n        <Fragment>\n          <Radio\n            label={_('Error Type')}\n            attr={`${this.props.attr}.type`}\n            options={[\n              {label: _('%'), value: 'percent'},\n              {label: _('Constant'), value: 'constant'},\n              {label: _('Data'), value: 'data'},\n            ]}\n          />\n          <Numeric label={_('Value')} attr={`${this.props.attr}.value`} />\n          <Numeric\n            label={_('Value (-)')}\n            attr={`${this.props.attr}.valueminus`}\n          />\n          {showCustomDataControl ? (\n            <Fragment>\n              <DataSelector\n                label={_('Error (+)')}\n                attr={`${this.props.attr}.array`}\n              />\n              <DataSelector\n                label={_('Error (-)')}\n                attr={`${this.props.attr}.arrayminus`}\n              />\n            </Fragment>\n          ) : null}\n        </Fragment>\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.renderModeSelector()}\n        {this.renderErrorBarControls()}\n      </Fragment>\n    );\n  }\n}\n\nErrorBars.propTypes = {\n  attr: PropTypes.string,\n  fullValue: PropTypes.object,\n  updatePlot: PropTypes.func,\n};\n\nErrorBars.contextTypes = {\n  localize: PropTypes.func,\n};\n\nexport default connectToContainer(ErrorBars);\n"]}