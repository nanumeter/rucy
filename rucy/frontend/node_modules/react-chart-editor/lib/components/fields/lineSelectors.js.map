{"version":3,"sources":["../../../src/components/fields/lineSelectors.js"],"names":["styledRenderer","label","strokeDashes","value","strokeDasharray","strokeShapes","d","strokeStyle","fill","strokeWidth","computeOptions","strokeData","stroke","map","LineShapeSelector","props","bind","LineDashSelector","lineColor","concat","LineSelector","context","setLocals","nextProps","nextContext","fullContainer","get","options","propTypes","func","defaultProps","clearable","contextTypes","object"],"mappings":"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","file":"lineSelectors.js","sourcesContent":["import Dropdown from './Dropdown';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {tooLight} from 'lib';\n\n/* eslint-disable react/prop-types */\nconst styledRenderer = ({label}) => {\n  return (\n    <div>\n      <svg width=\"100\" height=\"16\">\n        <g>{label}</g>\n      </svg>\n    </div>\n  );\n};\n/* eslint-enable react/prop-types */\n\nconst strokeDashes = [\n  {value: 'solid', strokeDasharray: ''},\n  {value: 'dot', strokeDasharray: '3px, 3px'},\n  {value: 'dash', strokeDasharray: '9px, 9px'},\n  {value: 'longdash', strokeDasharray: '15px, 15px'},\n  {value: 'dashdot', strokeDasharray: '9px, 3px, 3px, 3px'},\n  {value: 'longdashdot', strokeDasharray: '15px, 6px, 3px, 6px'},\n];\n\nconst strokeShapes = [\n  {d: 'M2,14L14,2', value: 'linear'},\n  {d: 'M2,14C4,4 16,16 18,2', value: 'spline'},\n  {d: 'M2,14H14V2', value: 'hv'},\n  {d: 'M2,14V2H14', value: 'vh'},\n  {d: 'M2,14H8V2H14', value: 'hvh'},\n  {d: 'M2,14V8H14V2', value: 'vhv'},\n];\n\nconst strokeStyle = {fill: 'none', strokeWidth: '4px'};\nconst computeOptions = (strokeData, stroke) =>\n  strokeData.map(({value, strokeDasharray, d = 'M0,8h100'}) => ({\n    label: <path d={d} style={{...strokeStyle, stroke, strokeDasharray}} />,\n    value,\n  }));\n\nexport const LineShapeSelector = props => {\n  return (\n    <LineSelector\n      {...props}\n      computeOptions={computeOptions.bind(null, strokeShapes)}\n    />\n  );\n};\n\nexport const LineDashSelector = props => {\n  return (\n    <LineSelector\n      {...props}\n      computeOptions={lineColor =>\n        computeOptions(strokeDashes, lineColor).concat([\n          {\n            label: '',\n            value: null,\n          },\n        ])\n      }\n    />\n  );\n};\n\nclass LineSelector extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.setLocals(props, context);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setLocals(nextProps, nextContext);\n  }\n\n  setLocals(nextProps, nextContext) {\n    const {fullContainer} = nextContext;\n    const lineColor = nestedProperty(fullContainer, 'line.color').get();\n    if (!this.options || this.lineColor !== lineColor) {\n      this.options = this.props.computeOptions(lineColor);\n      this.lineColor = lineColor;\n    }\n  }\n\n  render() {\n    return (\n      <Dropdown\n        {...this.props}\n        options={this.options}\n        valueRenderer={styledRenderer}\n        optionRenderer={styledRenderer}\n        backgroundDark={tooLight(this.lineColor)}\n      />\n    );\n  }\n}\n\nLineSelector.propTypes = {\n  computeOptions: PropTypes.func,\n  ...Dropdown.propTypes,\n};\n\nLineSelector.defaultProps = {\n  clearable: false,\n};\n\nLineSelector.contextTypes = {\n  fullContainer: PropTypes.object,\n};\n"]}