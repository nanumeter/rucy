{"version":3,"sources":["../../../src/components/fields/UpdateMenuButtons.js"],"names":["UpdateMenuButtons","props","context","state","currentButtonIndex","_","localize","options","fullValue","map","button","index","label","value","setState","renderDropdown","propTypes","attr","string","array","updatePlot","func","contextTypes"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;IAEMA,iB;;;AACJ,6BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,sIACpBD,KADoB,EACbC,OADa;;AAE1B,UAAKC,KAAL,GAAa;AACXC,0BAAoB;AADT,KAAb;AAF0B;AAK3B;;;;qCAEgB;AAAA;;AACf,UAAMC,IAAI,KAAKH,OAAL,CAAaI,QAAvB;AACA,UAAMC,UAAU,KAAKN,KAAL,CAAWO,SAAX,CAAqBC,GAArB,CAAyB,UAACC,MAAD,EAASC,KAAT,EAAmB;AAC1D,eAAO,EAACC,OAAOP,EAAE,QAAF,YAAkBM,QAAQ,CAA1B,EAAR,EAAuCE,OAAOF,KAA9C,EAAP;AACD,OAFe,CAAhB;AAGA,aACE;AACE,cAAK,SADP;AAEE,eAAON,EAAE,QAAF,CAFT;AAGE,iBAASE,OAHX;AAIE,oBAAY;AAAA,iBAAS,OAAKO,QAAL,CAAc,EAACV,oBAAoBO,KAArB,EAAd,CAAT;AAAA,SAJd;AAKE,mBAAW,KALb;AAME,mBAAW,KAAKR,KAAL,CAAWC;AANxB,QADF;AAUD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AACG,aAAKW,cAAL,EADH;AAEE;AACE,6BAAiB,KAAKZ,KAAL,CAAWC,kBAA5B,YADF;AAEE;AAFF;AAFF,OADF;AASD;;;;;;AAGHJ,kBAAkBgB,SAAlB,GAA8B;AAC5BC,QAAM,oBAAUC,MADY;AAE5BV,aAAW,oBAAUW,KAFO;AAG5BC,cAAY,oBAAUC;AAHM,CAA9B;;AAMArB,kBAAkBsB,YAAlB,GAAiC;AAC/BhB,YAAU,oBAAUe;AADW,CAAjC;;kBAIe,6BAAmBrB,iBAAnB,C","file":"UpdateMenuButtons.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {Dropdown, TextEditor} from '../index';\nimport Field from './Field';\nimport {connectToContainer} from 'lib';\n\nclass UpdateMenuButtons extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      currentButtonIndex: 0,\n    };\n  }\n\n  renderDropdown() {\n    const _ = this.context.localize;\n    const options = this.props.fullValue.map((button, index) => {\n      return {label: _('Button') + ` ${index + 1}`, value: index};\n    });\n    return (\n      <Dropdown\n        attr=\"buttons\"\n        label={_('Button')}\n        options={options}\n        updatePlot={index => this.setState({currentButtonIndex: index})}\n        clearable={false}\n        fullValue={this.state.currentButtonIndex}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <Field>\n        {this.renderDropdown()}\n        <TextEditor\n          attr={`buttons[${this.state.currentButtonIndex}].label`}\n          richTextOnly\n        />\n      </Field>\n    );\n  }\n}\n\nUpdateMenuButtons.propTypes = {\n  attr: PropTypes.string,\n  fullValue: PropTypes.array,\n  updatePlot: PropTypes.func,\n};\n\nUpdateMenuButtons.contextTypes = {\n  localize: PropTypes.func,\n};\n\nexport default connectToContainer(UpdateMenuButtons);\n"]}