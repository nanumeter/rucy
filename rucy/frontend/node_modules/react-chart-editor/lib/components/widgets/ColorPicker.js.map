{"version":3,"sources":["../../../src/components/widgets/ColorPicker.js"],"names":["defaultColors","extractRGB","c","rgb","getColorSource","source","hex","toTinyColor","Custom","props","onChangeComplete","r","g","b","a","activeColor","backgroundColor","_","context","localize","contextTypes","func","propTypes","object","CustomColorPicker","ColorPicker","state","isVisible","onSelectedColorChange","bind","toggleVisible","newColor","color","onColorChange","toRgbString","setState","selectedColor","colorText","toHexString","rgbString","swatchStyle","isRequired","string"],"mappings":"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","file":"ColorPicker.js","sourcesContent":["import Fields from 'react-color/lib/components/sketch/SketchFields';\nimport PresetColors from 'react-color/lib/components/sketch/SketchPresetColors';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport tinycolor from 'tinycolor2';\nimport {\n  Alpha,\n  Hue,\n  Saturation,\n  Checkboard,\n} from 'react-color/lib/components/common';\nimport {CustomPicker as customPicker} from 'react-color';\n\n/* eslint-disable no-inline-comments */\nconst defaultColors = [\n  '#444444',\n  '#ffffff',\n  '#1f77b4', // muted blue\n  '#ff7f0e', // safety orange\n  '#2ca02c', // cooked asparagus green\n  '#d62728', // brick red\n  '#9467bd', // muted purple\n  '#8c564b', // chestnut brown\n  '#e377c2', // raspberry yogurt pink\n  '#7f7f7f', // middle gray\n  '#bcbd22', // curry yellow-green\n  '#17becf', // blue-teal\n];\n/* eslint-enable no-inline-comments */\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nconst extractRGB = c => c.rgb || c;\nconst getColorSource = c => (c.source === 'hex' ? c.hex : extractRGB(c));\nconst toTinyColor = c => tinycolor(getColorSource(c));\n\nclass Custom extends Component {\n  render() {\n    const {rgb, onChangeComplete} = this.props;\n    const {r, g, b, a} = rgb;\n\n    const activeColor = {\n      backgroundColor: `rgba(${r}, ${g}, ${b}, ${a})`,\n    };\n\n    const _ = this.context.localize;\n\n    return (\n      <div>\n        <div>\n          <p className=\"colorpicker__title\">{_('Custom Color')}</p>\n          <div className=\"colorpicker__saturation\">\n            <Saturation {...this.props} />\n          </div>\n          <div className=\"colorpicker__controls +flex\">\n            <div className=\"colorpicker__sliders\">\n              <div className=\"colorpicker__slider\">\n                <Hue {...this.props} />\n              </div>\n              <div className=\"colorpicker__slider\">\n                <Alpha {...this.props} />\n              </div>\n            </div>\n            <div className=\"colorpicker__active\">\n              <Checkboard />\n              <div style={activeColor} className=\"colorpicker__active-swatch\" />\n            </div>\n          </div>\n          <div className=\"colorpicker__custom-input\">\n            <Fields {...this.props} onChange={onChangeComplete} />\n          </div>\n        </div>\n        <div>\n          <p className=\"colorpicker__title\">{_('Default Colors')}</p>\n          <div className=\"colorpicker__preset-colors\">\n            <PresetColors colors={defaultColors} onClick={onChangeComplete} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCustom.contextTypes = {\n  localize: PropTypes.func,\n};\n\nCustom.propTypes = {\n  rgb: PropTypes.object,\n  onChangeComplete: PropTypes.func,\n};\n\nconst CustomColorPicker = customPicker(Custom);\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n    };\n\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  onSelectedColorChange(newColor) {\n    // We use our own toTinyColor because this value is a ColorPicker\n    // color value which is an object that needs unpacking. We also handle\n    // the case where a color string is passed in (just in case).\n\n    const color = toTinyColor(newColor);\n\n    // relayout call only wants a RGB String\n    this.props.onColorChange(color.toRgbString());\n  }\n\n  toggleVisible() {\n    this.setState({isVisible: !this.state.isVisible});\n  }\n\n  render() {\n    // We use tinycolor here instead of our own toTinyColor as\n    // tinycolor handles `null` values and other weirdness we may\n    // expect from user data.\n    const selectedColor = tinycolor(this.props.selectedColor);\n    const colorText = selectedColor.toHexString();\n    const rgbString = selectedColor.toRgbString();\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = {backgroundColor: rgbString};\n\n    return (\n      <div className=\"colorpicker__container\">\n        <div className=\"colorpicker\">\n          <div\n            className=\"colorpicker__swatch +cursor-clickable\"\n            style={swatchStyle}\n            onClick={this.toggleVisible}\n          />\n        </div>\n\n        <div\n          className=\"colorpicker__selected-color +hover-grey\"\n          onClick={this.toggleVisible}\n        >\n          {colorText}\n        </div>\n\n        {this.state.isVisible && (\n          <div className=\"colorpicker__popover\">\n            <div className=\"colorpicker__cover\" onClick={this.toggleVisible} />\n            <CustomColorPicker\n              color={rgbString}\n              onChangeComplete={this.onSelectedColorChange}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n};\n\nexport default ColorPicker;\n"]}