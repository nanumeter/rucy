{"version":3,"sources":["../../../src/components/widgets/TraceTypeSelector.js"],"names":["actions","value","label","href","icon","renderActionItems","actionItems","item","map","action","i","Item","active","handleClick","showActions","complex","SimpleIcon","ComplexIcon","TraceTypeSelector","computedValue","props","updateContainer","context","handleClose","fullValue","traceTypesConfig","traces","categories","_","localize","category","items","filter","MAX_ITEMS","columnClasses","length","selectAndClose","renderCategories","display","maxWidth","flexFlow","padding","renderGrid","renderSingleBlock","TraceTypeSelectorButton","container","inferredType","find","type","Icon","propTypes","func","string","contextTypes","object","isRequired","bool"],"mappings":"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","file":"TraceTypeSelector.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {SearchIcon, ThumnailViewIcon, GraphIcon} from 'plotly-icons';\nimport Modal from 'components/containers/Modal';\nimport {\n  traceTypeToPlotlyInitFigure,\n  renderTraceIcon,\n  plotlyTraceToCustomTrace,\n} from 'lib';\n\nconst actions = ({value}) => [\n  {\n    label: `Charts like this by Plotly users.`,\n    href: `https://plot.ly/feed/?q=plottype:${value}`,\n    icon: <SearchIcon />,\n  },\n  {\n    label: `View tutorials on this chart type.`,\n    href: `#`,\n    icon: <ThumnailViewIcon />,\n  },\n  {\n    label: `See a basic example.`,\n    href: `#`,\n    icon: <GraphIcon />,\n  },\n];\n\nconst renderActionItems = (actionItems, item) =>\n  actionItems\n    ? actionItems(item).map((action, i) => (\n        <a\n          className=\"trace-item__actions__item\"\n          key={i}\n          aria-label={action.label}\n          data-microtip-position={`top-left`}\n          role=\"tooltip\"\n          href={action.href}\n          target=\"_blank\"\n        >\n          {action.icon}\n        </a>\n      ))\n    : null;\n\nconst Item = ({item, active, handleClick, actions, showActions, complex}) => {\n  const {label, value, icon} = item;\n  const SimpleIcon = renderTraceIcon(icon ? icon : value);\n  const ComplexIcon = renderTraceIcon(icon ? icon : value, 'TraceType');\n\n  return (\n    <div\n      className={`trace-item${active ? ' trace-item--active' : ''}`}\n      onClick={() => handleClick()}\n    >\n      <div className=\"trace-item__actions\">\n        {actions && showActions ? renderActionItems(actions, item) : null}\n      </div>\n      <div className=\"trace-item__image\">\n        {!complex && (\n          <div className=\"trace-item__image__svg\">\n            <SimpleIcon />\n          </div>\n        )}\n        {complex && (\n          <div className=\"trace-item__image__wrapper\">\n            <ComplexIcon />\n          </div>\n        )}\n      </div>\n      <div className=\"trace-item__label\">{label}</div>\n    </div>\n  );\n};\n\nclass TraceTypeSelector extends Component {\n  selectAndClose(value) {\n    const computedValue = traceTypeToPlotlyInitFigure(value);\n    this.props.updateContainer(computedValue);\n    this.context.handleClose();\n  }\n\n  renderCategories() {\n    const {fullValue} = this.props;\n    const {\n      traceTypesConfig: {traces, categories, complex},\n      localize: _,\n    } = this.context;\n\n    return categories(_).map((category, i) => {\n      const items = traces(_).filter(\n        ({category: {value}}) => value === category.value\n      );\n\n      const MAX_ITEMS = 4;\n\n      let columnClasses = 'trace-grid__column';\n\n      if (items.length > MAX_ITEMS) {\n        columnClasses += ' trace-grid__column--double';\n      }\n\n      return (\n        <div className={columnClasses} key={i}>\n          <div className=\"trace-grid__column__header\">{category.label}</div>\n          <div className=\"trace-grid__column__items\">\n            {items.map(item => (\n              <Item\n                complex={complex}\n                key={item.value}\n                active={fullValue === item.value}\n                item={item}\n                actions={actions}\n                showActions={false}\n                handleClick={() => this.selectAndClose(item.value)}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    });\n  }\n\n  renderGrid() {\n    return <div className=\"trace-grid\">{this.renderCategories()}</div>;\n  }\n\n  renderSingleBlock() {\n    const {fullValue} = this.props;\n    const {\n      traceTypesConfig: {traces, complex},\n      localize: _,\n    } = this.context;\n\n    const items = traces(_).map(item => (\n      <Item\n        key={item.value}\n        complex={complex}\n        active={fullValue === item.value}\n        item={item}\n        actions={actions}\n        showActions={false}\n        handleClick={() => this.selectAndClose(item.value)}\n        style={{display: 'inline-block'}}\n      />\n    ));\n\n    return (\n      <div\n        style={{\n          maxWidth: '460px',\n          display: 'flex',\n          flexFlow: 'wrap',\n          padding: '5px',\n        }}\n      >\n        {items}\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      traceTypesConfig: {categories},\n      localize: _,\n    } = this.context;\n\n    return (\n      <Modal title={_('Select Trace Type')}>\n        {categories ? this.renderGrid() : this.renderSingleBlock()}\n      </Modal>\n    );\n  }\n}\n\nexport class TraceTypeSelectorButton extends Component {\n  render() {\n    const {\n      handleClick,\n      container,\n      traceTypesConfig: {traces},\n    } = this.props;\n\n    const {localize: _} = this.context;\n\n    const inferredType = plotlyTraceToCustomTrace(container);\n    const {label, icon, value} = traces(_).find(\n      type => type.value === inferredType\n    );\n\n    const Icon = renderTraceIcon(icon ? icon : value);\n\n    return (\n      <div\n        className=\"trace-type-select-button\"\n        onClick={handleClick ? () => handleClick() : null}\n      >\n        <div className=\"trace-type-select-button__icon\">\n          <Icon />\n        </div>\n        {label}\n      </div>\n    );\n  }\n}\n\nTraceTypeSelector.propTypes = {\n  updateContainer: PropTypes.func,\n  fullValue: PropTypes.string,\n};\nTraceTypeSelector.contextTypes = {\n  traceTypesConfig: PropTypes.object,\n  handleClose: PropTypes.func,\n  localize: PropTypes.func,\n};\nTraceTypeSelectorButton.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  container: PropTypes.object,\n  traceTypesConfig: PropTypes.object.isRequired,\n};\nTraceTypeSelectorButton.contextTypes = {\n  localize: PropTypes.func,\n};\nItem.propTypes = {\n  item: PropTypes.object,\n  active: PropTypes.bool,\n  complex: PropTypes.bool,\n  handleClick: PropTypes.func,\n  actions: PropTypes.func,\n  showActions: PropTypes.bool,\n};\n\nexport default TraceTypeSelector;\n"]}