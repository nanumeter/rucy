'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceTypeSelectorButton = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _plotlyIcons = require('plotly-icons');

var _Modal = require('../containers/Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _lib = require('../../lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var actions = function actions(_ref) {
  var value = _ref.value;
  return [{
    label: 'Charts like this by Plotly users.',
    href: 'https://plot.ly/feed/?q=plottype:' + value,
    icon: _react2.default.createElement(_plotlyIcons.SearchIcon, null)
  }, {
    label: 'View tutorials on this chart type.',
    href: '#',
    icon: _react2.default.createElement(_plotlyIcons.ThumnailViewIcon, null)
  }, {
    label: 'See a basic example.',
    href: '#',
    icon: _react2.default.createElement(_plotlyIcons.GraphIcon, null)
  }];
};

var renderActionItems = function renderActionItems(actionItems, item) {
  return actionItems ? actionItems(item).map(function (action, i) {
    return _react2.default.createElement(
      'a',
      {
        className: 'trace-item__actions__item',
        key: i,
        'aria-label': action.label,
        'data-microtip-position': 'top-left',
        role: 'tooltip',
        href: action.href,
        target: '_blank'
      },
      action.icon
    );
  }) : null;
};

var Item = function Item(_ref2) {
  var item = _ref2.item,
      active = _ref2.active,
      handleClick = _ref2.handleClick,
      actions = _ref2.actions,
      showActions = _ref2.showActions,
      complex = _ref2.complex;
  var label = item.label,
      value = item.value,
      icon = item.icon;

  var SimpleIcon = (0, _lib.renderTraceIcon)(icon ? icon : value);
  var ComplexIcon = (0, _lib.renderTraceIcon)(icon ? icon : value, 'TraceType');

  return _react2.default.createElement(
    'div',
    {
      className: 'trace-item' + (active ? ' trace-item--active' : ''),
      onClick: function onClick() {
        return handleClick();
      }
    },
    _react2.default.createElement(
      'div',
      { className: 'trace-item__actions' },
      actions && showActions ? renderActionItems(actions, item) : null
    ),
    _react2.default.createElement(
      'div',
      { className: 'trace-item__image' },
      !complex && _react2.default.createElement(
        'div',
        { className: 'trace-item__image__svg' },
        _react2.default.createElement(SimpleIcon, null)
      ),
      complex && _react2.default.createElement(
        'div',
        { className: 'trace-item__image__wrapper' },
        _react2.default.createElement(ComplexIcon, null)
      )
    ),
    _react2.default.createElement(
      'div',
      { className: 'trace-item__label' },
      label
    )
  );
};

var TraceTypeSelector = function (_Component) {
  _inherits(TraceTypeSelector, _Component);

  function TraceTypeSelector() {
    _classCallCheck(this, TraceTypeSelector);

    return _possibleConstructorReturn(this, (TraceTypeSelector.__proto__ || Object.getPrototypeOf(TraceTypeSelector)).apply(this, arguments));
  }

  _createClass(TraceTypeSelector, [{
    key: 'selectAndClose',
    value: function selectAndClose(value) {
      var computedValue = (0, _lib.traceTypeToPlotlyInitFigure)(value);
      this.props.updateContainer(computedValue);
      this.context.handleClose();
    }
  }, {
    key: 'renderCategories',
    value: function renderCategories() {
      var _this2 = this;

      var fullValue = this.props.fullValue;
      var _context = this.context,
          _context$traceTypesCo = _context.traceTypesConfig,
          traces = _context$traceTypesCo.traces,
          categories = _context$traceTypesCo.categories,
          complex = _context$traceTypesCo.complex,
          _ = _context.localize;


      return categories(_).map(function (category, i) {
        var items = traces(_).filter(function (_ref3) {
          var value = _ref3.category.value;
          return value === category.value;
        });

        var MAX_ITEMS = 4;

        var columnClasses = 'trace-grid__column';

        if (items.length > MAX_ITEMS) {
          columnClasses += ' trace-grid__column--double';
        }

        return _react2.default.createElement(
          'div',
          { className: columnClasses, key: i },
          _react2.default.createElement(
            'div',
            { className: 'trace-grid__column__header' },
            category.label
          ),
          _react2.default.createElement(
            'div',
            { className: 'trace-grid__column__items' },
            items.map(function (item) {
              return _react2.default.createElement(Item, {
                complex: complex,
                key: item.value,
                active: fullValue === item.value,
                item: item,
                actions: actions,
                showActions: false,
                handleClick: function handleClick() {
                  return _this2.selectAndClose(item.value);
                }
              });
            })
          )
        );
      });
    }
  }, {
    key: 'renderGrid',
    value: function renderGrid() {
      return _react2.default.createElement(
        'div',
        { className: 'trace-grid' },
        this.renderCategories()
      );
    }
  }, {
    key: 'renderSingleBlock',
    value: function renderSingleBlock() {
      var _this3 = this;

      var fullValue = this.props.fullValue;
      var _context2 = this.context,
          _context2$traceTypesC = _context2.traceTypesConfig,
          traces = _context2$traceTypesC.traces,
          complex = _context2$traceTypesC.complex,
          _ = _context2.localize;


      var items = traces(_).map(function (item) {
        return _react2.default.createElement(Item, {
          key: item.value,
          complex: complex,
          active: fullValue === item.value,
          item: item,
          actions: actions,
          showActions: false,
          handleClick: function handleClick() {
            return _this3.selectAndClose(item.value);
          },
          style: { display: 'inline-block' }
        });
      });

      return _react2.default.createElement(
        'div',
        {
          style: {
            maxWidth: '460px',
            display: 'flex',
            flexFlow: 'wrap',
            padding: '5px'
          }
        },
        items
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _context3 = this.context,
          categories = _context3.traceTypesConfig.categories,
          _ = _context3.localize;


      return _react2.default.createElement(
        _Modal2.default,
        { title: _('Select Trace Type') },
        categories ? this.renderGrid() : this.renderSingleBlock()
      );
    }
  }]);

  return TraceTypeSelector;
}(_react.Component);

var TraceTypeSelectorButton = exports.TraceTypeSelectorButton = function (_Component2) {
  _inherits(TraceTypeSelectorButton, _Component2);

  function TraceTypeSelectorButton() {
    _classCallCheck(this, TraceTypeSelectorButton);

    return _possibleConstructorReturn(this, (TraceTypeSelectorButton.__proto__ || Object.getPrototypeOf(TraceTypeSelectorButton)).apply(this, arguments));
  }

  _createClass(TraceTypeSelectorButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          handleClick = _props.handleClick,
          container = _props.container,
          traces = _props.traceTypesConfig.traces;
      var _ = this.context.localize;


      var inferredType = (0, _lib.plotlyTraceToCustomTrace)(container);

      var _traces$find = traces(_).find(function (type) {
        return type.value === inferredType;
      }),
          label = _traces$find.label,
          icon = _traces$find.icon,
          value = _traces$find.value;

      var Icon = (0, _lib.renderTraceIcon)(icon ? icon : value);

      return _react2.default.createElement(
        'div',
        {
          className: 'trace-type-select-button',
          onClick: handleClick ? function () {
            return handleClick();
          } : null
        },
        _react2.default.createElement(
          'div',
          { className: 'trace-type-select-button__icon' },
          _react2.default.createElement(Icon, null)
        ),
        label
      );
    }
  }]);

  return TraceTypeSelectorButton;
}(_react.Component);

TraceTypeSelector.propTypes = {
  updateContainer: _propTypes2.default.func,
  fullValue: _propTypes2.default.string
};
TraceTypeSelector.contextTypes = {
  traceTypesConfig: _propTypes2.default.object,
  handleClose: _propTypes2.default.func,
  localize: _propTypes2.default.func
};
TraceTypeSelectorButton.propTypes = {
  handleClick: _propTypes2.default.func.isRequired,
  container: _propTypes2.default.object,
  traceTypesConfig: _propTypes2.default.object.isRequired
};
TraceTypeSelectorButton.contextTypes = {
  localize: _propTypes2.default.func
};
Item.propTypes = {
  item: _propTypes2.default.object,
  active: _propTypes2.default.bool,
  complex: _propTypes2.default.bool,
  handleClick: _propTypes2.default.func,
  actions: _propTypes2.default.func,
  showActions: _propTypes2.default.bool
};

exports.default = TraceTypeSelector;
//# sourceMappingURL=TraceTypeSelector.js.map