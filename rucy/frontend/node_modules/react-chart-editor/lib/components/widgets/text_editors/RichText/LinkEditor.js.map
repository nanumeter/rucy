{"version":3,"sources":["../../../../../src/components/widgets/text_editors/RichText/LinkEditor.js"],"names":["LinkEditor","props","state","position","getUpdatedPosition","originalLinkURL","linkURL","trim","input","focus","nextProps","linkID","setState","setSelectionRange","length","coordinates","x","y","urlValue","onURLChange","ev","key","preventDefault","onClose","onInputChange","_","context","localize","onBlur","onFocus","placeholderText","urlText","left","top","target","value","onInputKeyDown","propTypes","string","isRequired","func","shape","number","defaultProps","contextTypes"],"mappings":"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","file":"LinkEditor.js","sourcesContent":["/*\n * The LinkEditor is a simple UI component that floats below a selected link\n * in the RichTextEditor, and lets the user enter a URL.\n */\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {RETURN_KEY, ESCAPE_KEY} from 'lib/constants';\nimport {findDOMNode} from 'react-dom';\n\nclass LinkEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Use cached position to maintain position during times of focus.\n      position: this.getUpdatedPosition(props),\n      originalLinkURL: props.linkURL,\n    };\n  }\n\n  componentDidMount() {\n    // Focus the input field if the URL value is empty\n    if (this.props.linkURL.trim() === '') {\n      findDOMNode(this.input).focus();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {props} = this;\n\n    // Update position if we are editing a new link\n    if (nextProps.linkID !== props.linkID) {\n      this.setState({\n        position: this.getUpdatedPosition(props),\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    // Cursor dissappears when component rerenders, to make sure it's present\n    // we're using setSelection range to make it appear at the end of text:\n    // https://github.com/plotly/streambed/issues/9964\n    findDOMNode(this.input).setSelectionRange(\n      this.props.linkURL.length,\n      this.props.linkURL.length\n    );\n  }\n\n  getUpdatedPosition(props) {\n    const {x, y} = props.coordinates;\n\n    return {x, y};\n  }\n\n  onInputChange(urlValue) {\n    const {linkID, onURLChange} = this.props;\n\n    // Call back to parent\n    onURLChange(linkID, urlValue);\n  }\n\n  onInputKeyDown(ev) {\n    /*\n         * `KeyboardEvent.key` enjoys excellent cross-browser support.\n         * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n         */\n    const {key} = ev;\n\n    if (key === RETURN_KEY) {\n      // Save changes\n      ev.preventDefault();\n\n      this.props.onClose(this.props.linkID);\n    }\n\n    if (key === ESCAPE_KEY) {\n      // Cancel changes\n      ev.preventDefault();\n\n      // Restore original URL\n      this.onInputChange(this.state.originalLinkURL);\n\n      this.props.onClose(this.props.linkID);\n    }\n  }\n\n  render() {\n    const {localize: _} = this.context;\n    const {position} = this.state;\n    const {onBlur, onFocus, linkURL} = this.props;\n    const placeholderText = _('Enter Link URL');\n    const urlText = _('URL');\n    // TODO: add close button\n    return (\n      <div\n        className=\"rich-text-editor__link-editor\"\n        style={{left: position.x, top: position.y}}\n      >\n        <span className=\"rich-text-editor__link-editor__label\">{urlText}</span>\n        <input\n          className=\"rich-text-editor__link-editor__input\"\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onChange={ev => this.onInputChange(ev.target.value)}\n          onKeyDown={ev => this.onInputKeyDown(ev)}\n          ref={input => (this.input = input)}\n          value={linkURL}\n          placeholder={placeholderText}\n        />\n      </div>\n    );\n  }\n}\n\nLinkEditor.propTypes = {\n  linkID: PropTypes.string.isRequired,\n  linkURL: PropTypes.string.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  onFocus: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onURLChange: PropTypes.func.isRequired,\n\n  coordinates: PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number,\n  }),\n};\n\nLinkEditor.defaultProps = {\n  coordinates: {\n    x: 0,\n    y: 0,\n  },\n};\n\nLinkEditor.contextTypes = {\n  localize: PropTypes.func.isRequired,\n};\n\nexport default LinkEditor;\n"]}