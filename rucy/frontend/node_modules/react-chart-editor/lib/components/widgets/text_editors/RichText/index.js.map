{"version":3,"sources":["../../../../../src/components/widgets/text_editors/RichText/index.js"],"names":["RichText","props","context","state","editorState","value","toString","trim","length","createEditorStateFromHTML","createEmpty","getDecorator","bind","getEditorStateAsHTML","focus","getParentContainerVerticalOffset","onChange","onBlur","onFocus","onLinkEditorBlur","onLinkEditorFocus","onLinkEditorChange","onLinkEditorClose","onKeyCommand","onReturnPressed","onStyleButtonToggle","renderLinkEditor","nextProps","linkEditorFocus","editorFocus","setState","nextState","placeholder","strategy","component","style","html","contentState","inlineStyles","element","defaultBlockTag","decorator","createWithContent","getCurrentContent","editorInput","document","querySelector","scrollTop","selectedLinkID","selection","getSelection","entityKey","newState","Object","assign","htmlContent","linkID","urlValue","selectionState","replaceData","url","updatedEditorState","toggleLink","command","newEditorState","inlineStyle","linkEntity","linkURL","getData","coordinates","linkIsSelected","Boolean","getCurrentInlineStyle","input","propTypes","func","isRequired","string","any","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CompositeDecorator,\n  Editor,\n  EditorState,\n  Entity,\n  RichUtils,\n} from 'draft-js';\nimport {stateToHTML} from '@plotly/draft-js-export-html';\nimport {stateFromHTML} from 'draft-js-import-html';\n\n// Constants\nimport {\n  SUPERSCRIPT,\n  SUBSCRIPT,\n  LINK,\n  STYLES_TO_HTML_TAGS,\n  STYLE_MAP,\n  INLINE_STYLES,\n} from './configuration';\n\n// Components\nimport LinkDecorator from './LinkDecorator';\nimport LinkEditor from './LinkEditor';\nimport StyleButtonGroup from './StyleButtonGroup';\n\n// Libraries\nimport debounce from './debounce';\nimport {\n  getEntityKeyAt,\n  getEntityByKey,\n  toggleInlineStyle,\n  handleKeyCommand,\n  insertSoftNewline,\n  cursorHasLink,\n} from './DraftCommands';\nimport {findLinkEntities} from './decoratorStrategies';\nimport getCoordinates from './getSelectionCoordinates';\n\nclass RichText extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    /*\n         * Initially set state based on the plotly.js annotation content.\n         * After this, as long as this component is mounted, it owns the source\n         * of truth for the annotation value via `this.state.editorState`.\n         * This state may be updated externally via a prop update.\n         * See `componentWillReceiveProps`.\n         */\n    this.state = {\n      editorState: props.value.toString().trim().length\n        ? this.createEditorStateFromHTML(props.value)\n        : EditorState.createEmpty(this.getDecorator()),\n    };\n\n    this.getDecorator = this.getDecorator.bind(this);\n    this.createEditorStateFromHTML = this.createEditorStateFromHTML.bind(this);\n    this.getEditorStateAsHTML = this.getEditorStateAsHTML.bind(this);\n    this.focus = this.focus.bind(this);\n    this.getParentContainerVerticalOffset = this.getParentContainerVerticalOffset.bind(\n      this\n    );\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onLinkEditorBlur = this.onLinkEditorBlur.bind(this);\n    this.onLinkEditorFocus = this.onLinkEditorFocus.bind(this);\n    this.onLinkEditorChange = this.onLinkEditorChange.bind(this);\n    this.onLinkEditorClose = this.onLinkEditorClose.bind(this);\n    this.onKeyCommand = this.onKeyCommand.bind(this);\n    this.onReturnPressed = this.onReturnPressed.bind(this);\n    this.onStyleButtonToggle = this.onStyleButtonToggle.bind(this);\n    this.renderLinkEditor = this.renderLinkEditor.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {linkEditorFocus, editorFocus} = this.state;\n\n    /*\n         * Don't worry about what plotly.js thinks the annotation value\n         * should be while we're using our editor, for these reasons:\n         *\n         * 1. The editor should be considered the source of truth, unless the\n         *    user is actually editing the annotation inline, in the chart.\n         * 2. Sometimes we get updates with stale values.\n         */\n    if (linkEditorFocus || editorFocus) {\n      return;\n    }\n\n    // Sync editor state with plotly annotation value.\n    const editorState = this.createEditorStateFromHTML(nextProps.value);\n\n    this.setState({editorState});\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const {placeholder, value} = this.props;\n    const {editorState, linkEditorFocus} = this.state;\n\n    // If relevant props or state changed, return true.\n    if (\n      // Always update when user is editing link\n      linkEditorFocus ||\n      placeholder !== nextProps.placeholder ||\n      value !== nextProps.value ||\n      editorState !== nextState.editorState\n    ) {\n      return true;\n    }\n\n    // Compare incoming value with HTML representation of state.\n    return nextProps.value !== this.getEditorStateAsHTML(editorState);\n  }\n\n  getDecorator() {\n    return new CompositeDecorator([\n      {\n        strategy: findLinkEntities,\n        component: LinkDecorator,\n\n        // Props for the LinkDecorator component\n        props: {\n          style: STYLE_MAP[LINK],\n        },\n      },\n    ]);\n  }\n\n  createEditorStateFromHTML(html) {\n    const contentState = stateFromHTML(html, {\n      inlineStyles: {\n        [SUPERSCRIPT]: {element: 'sup'},\n        [SUBSCRIPT]: {element: 'sub'},\n      },\n      defaultBlockTag: null,\n    });\n\n    const decorator = this.getDecorator();\n\n    /*\n     * Work around issue described here:\n     * https://github.com/facebook/draft-js/issues/185\n     * #issuecomment-217207612\n     */\n\n    // Parse once to generate entity instances\n    EditorState.createWithContent(contentState);\n\n    // Now we can add our decorator\n    return EditorState.createWithContent(contentState, decorator);\n  }\n\n  getEditorStateAsHTML(editorState) {\n    const contentState = editorState.getCurrentContent();\n\n    return stateToHTML(contentState, {\n      defaultBlockTag: null,\n      inlineStyles: STYLES_TO_HTML_TAGS,\n    });\n  }\n\n  focus() {\n    this.editorInput.focus();\n  }\n\n  // Used to properly calculate user selection coordinates.\n  getParentContainerVerticalOffset() {\n    return document.querySelector('.panel').scrollTop;\n  }\n\n  onChange(editorState) {\n    const {selectedLinkID} = this.state;\n    const selection = editorState.getSelection();\n    const entityKey = getEntityKeyAt(editorState, selection);\n\n    const newState = {editorState};\n\n    // Update selected link ID\n    if (!cursorHasLink(editorState, selection)) {\n      // If a link is no longer selected, clear selected link ID state\n      Object.assign(newState, {\n        selectedLinkID: null,\n      });\n    } else if (selectedLinkID !== entityKey) {\n      // If link selection is new / different link selected, update it\n      Object.assign(newState, {\n        selectedLinkID: entityKey,\n      });\n    }\n\n    // Update internal state\n    this.setState(newState);\n\n    // Dispatch changes to plotly.js\n    // TODO consider moving to render (plotly.js is a render target)\n    const htmlContent = this.getEditorStateAsHTML(editorState);\n    if (this.props.value !== htmlContent) {\n      debounce(this.props.onChange, [htmlContent]);\n    }\n  }\n\n  onBlur() {\n    this.setState({\n      editorFocus: false,\n    });\n  }\n\n  onFocus() {\n    this.setState({\n      editorFocus: true,\n    });\n  }\n\n  onLinkEditorBlur() {\n    this.setState({\n      linkEditorFocus: false,\n    });\n  }\n\n  onLinkEditorFocus() {\n    this.setState({\n      linkEditorFocus: true,\n    });\n  }\n\n  onLinkEditorChange(linkID, urlValue) {\n    const {editorState} = this.state;\n    const selectionState = editorState.getSelection();\n\n    // Update link URL\n    Entity.replaceData(linkID, {url: urlValue});\n\n    // Trigger an editor state update\n    const updatedEditorState = RichUtils.toggleLink(\n      editorState,\n      selectionState,\n      linkID\n    );\n\n    this.onChange(updatedEditorState);\n  }\n\n  /**\n   * Will be called by LinkEditor when the user confirms or cancels new URL.\n   * Will not be called if LinkEditor is closed by moving the cursor off of\n   * the selected LINK entity.\n   *\n   * @param   {String} linkID The link entity key related to this LinkEditor\n   * @returns {undefined}\n   */\n  onLinkEditorClose() {\n    /*\n         * Focus on editor immediately to avoid error that occurs when\n         * `selection.extend` is called and another element has focus.\n         * https://bugzilla.mozilla.org/show_bug.cgi?id=921444\n         * https://github.com/facebook/draft-js/blob/342576bf7186d07c82a41d9ca8169130669747d6/src/component/selection/setDraftEditorSelection.js#L128-L134\n         */\n    this.focus();\n\n    // Hide the editor.\n    this.setState({\n      linkEditorFocus: false,\n      selectedLinkID: null,\n    });\n  }\n\n  onKeyCommand(command) {\n    const newEditorState = handleKeyCommand(this.state.editorState, command);\n\n    if (newEditorState) {\n      this.onChange(newEditorState);\n\n      // Let draft-js know that keyboard command is handled.\n      return true;\n    }\n\n    // Default draft-js implementation\n    return false;\n  }\n\n  onReturnPressed() {\n    const newEditorState = insertSoftNewline(this.state.editorState);\n\n    // Update internal and external state\n    this.onChange(newEditorState);\n\n    // Cancel draft-js implementation\n    return true;\n  }\n\n  onStyleButtonToggle(inlineStyle) {\n    const newEditorState = toggleInlineStyle(\n      this.state.editorState,\n      inlineStyle\n    );\n\n    if (newEditorState) {\n      this.onChange(newEditorState);\n    }\n  }\n\n  renderLinkEditor(selectedLinkID) {\n    if (!selectedLinkID) {\n      return null;\n    }\n\n    // All entities are link entities.\n    const linkEntity = getEntityByKey(selectedLinkID);\n    const linkURL = linkEntity.getData().url;\n\n    const coordinates = getCoordinates();\n\n    return (\n      <LinkEditor\n        onFocus={this.onLinkEditorFocus}\n        onURLChange={this.onLinkEditorChange}\n        onBlur={this.onLinkEditorBlur}\n        onClose={this.onLinkEditorClose}\n        coordinates={coordinates}\n        linkID={selectedLinkID}\n        linkURL={linkURL}\n      />\n    );\n  }\n\n  render() {\n    const {editorState, selectedLinkID} = this.state;\n    const linkIsSelected = Boolean(selectedLinkID);\n\n    return (\n      <div className=\"rich-text-editor__root\">\n        <StyleButtonGroup\n          styles={INLINE_STYLES}\n          currentStyle={editorState.getCurrentInlineStyle()}\n          linkIsSelected={linkIsSelected}\n          onToggle={this.onStyleButtonToggle}\n        />\n        <div className=\"rich-text-editor__editor\" onClick={this.focus}>\n          <Editor\n            customStyleMap={STYLE_MAP}\n            editorState={editorState}\n            handleReturn={this.onReturnPressed}\n            handleKeyCommand={this.onKeyCommand}\n            onChange={this.onChange}\n            onBlur={this.onBlur}\n            onFocus={this.onFocus}\n            placeholder={this.props.placeholder}\n            spellCheck={false}\n            ref={input => (this.editorInput = input)}\n          />\n        </div>\n        {this.renderLinkEditor(selectedLinkID)}\n      </div>\n    );\n  }\n}\n\nRichText.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.any,\n};\n\nRichText.defaultProps = {\n  placeholder: '',\n  value: '',\n};\n\nexport default RichText;\n"]}