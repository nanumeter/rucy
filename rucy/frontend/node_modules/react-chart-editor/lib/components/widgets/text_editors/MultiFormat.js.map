{"version":3,"sources":["../../../../src/components/widgets/text_editors/MultiFormat.js"],"names":["MultiFormatTextEditor","props","context","_","localize","editors","key","label","component","startTab","value","state","nextTab","currentTab","messages","onModeChange","bind","editor","defaultValuePattern","onChange","trimmedValue","trim","trimmedValueLength","length","convertedValue","convertValue","isDefaultValue","test","switchingBetweenRichAndHtml","setState","render","onCancel","onContinue","placeholder","richTextClassNames","selected","latexClassNames","bottomTabClassNames","Editor","filter","ModeTabsText","map","showBottomTab","BottomTab","toLowerCase","content","renderConfirmationPanel","renderEditor","propTypes","instanceOf","RegExp","func","isRequired","string","defaultProps","contextTypes"],"mappings":"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","file":"MultiFormat.js","sourcesContent":["import HTMLEditor from './HTML';\nimport LaTeXEditor from './LaTeX';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport RichTextEditor from './RichText';\nimport {\n  isLaTeXExpr,\n  htmlToLaTeX,\n  laTeXToHTML,\n  hasTextExpression,\n} from './convertFormats';\nimport classnames from 'classnames';\nimport Button from 'components/widgets/Button';\n\nclass MultiFormatTextEditor extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    const _ = context.localize;\n\n    const editors = [\n      {\n        key: 'RICH_TEXT',\n        label: _('Rich Text'),\n        component: RichTextEditor,\n      },\n      {\n        key: 'LATEX',\n        label: _('LaTeX'),\n        component: LaTeXEditor,\n      },\n      {\n        key: 'HTML',\n        label: _('Edit in HTML'),\n        component: HTMLEditor,\n      },\n    ];\n\n    const startTab = isLaTeXExpr(props.value) ? 'LATEX' : 'RICH_TEXT';\n\n    this.state = {\n      /*\n       * When nextTab is set, we are waiting for confirmation from the\n       * user before switching to the next tab.\n       */\n      nextTab: null,\n      currentTab: startTab,\n      messages: [],\n    };\n\n    this.onModeChange = this.onModeChange.bind(this);\n    this.editors = editors;\n  }\n\n  /**\n   * Convert a value to the format expected by the provided editor.\n   *\n   * @param {String} value The current value\n   * @param {String} editor The editor to convert for [RICH_TEXT|LATEX]\n   * @returns {String} The converted value\n   */\n  convertValue(value, editor) {\n    const {currentTab} = this.state;\n\n    if (currentTab === 'RICH_TEXT' && editor === 'LATEX') {\n      return htmlToLaTeX(value);\n    }\n\n    if (currentTab === 'LATEX' && editor === 'RICH_TEXT') {\n      return laTeXToHTML(value);\n    }\n\n    if (currentTab === 'HTML' && editor === 'LATEX') {\n      return htmlToLaTeX(value);\n    }\n\n    /*\n     * Else we're switching from / to HTML / Rich Text Editor\n     * no conversion is needed\n     */\n    return value;\n  }\n\n  onModeChange(nextTab) {\n    const {localize: _} = this.context;\n    const {defaultValuePattern, value, onChange} = this.props;\n    const {currentTab} = this.state;\n    const trimmedValue = value.trim();\n    const trimmedValueLength = trimmedValue.length;\n    const convertedValue = this.convertValue(trimmedValue, nextTab);\n\n    /*\n     * Check against default value - we have to compare the plain\n     * value, not the LaTeX format value with `\\text{}` wrapping.\n     */\n    const isDefaultValue = isLaTeXExpr(trimmedValue)\n      ? defaultValuePattern.test(convertedValue)\n      : defaultValuePattern.test(trimmedValue);\n\n    const switchingBetweenRichAndHtml =\n      (currentTab === 'RICH_TEXT' && nextTab === 'HTML') ||\n      (currentTab === 'HTML' && nextTab === 'RICH_TEXT');\n\n    if (\n      !isDefaultValue &&\n      trimmedValueLength > 0 &&\n      !switchingBetweenRichAndHtml\n    ) {\n      // Show confirmation dialogue and defer tab change.\n      let messages;\n\n      if (!isLaTeXExpr(value)) {\n        messages = [\n          _(\n            \"LaTeX is a math typesetting language that doesn't work with rich text.\"\n          ),\n          _('Continuing will convert your note to LaTeX-style text.'),\n        ];\n      } else if (hasTextExpression(value)) {\n        messages = [\n          _('Rich text is incompatible with LaTeX.'),\n          _('Continuing will convert your LaTeX expression into raw text.'),\n        ];\n      } else {\n        messages = [\n          _('Rich text is incompatible with LaTeX.'),\n          _('Continuing will remove your expression.'),\n        ];\n      }\n\n      this.setState({\n        nextTab,\n        messages,\n      });\n\n      return;\n    }\n\n    // Show requested tab immediately.\n    this.setState({\n      currentTab: nextTab,\n    });\n\n    // Convert the annotation and dispatch onChange action\n    onChange(convertedValue);\n  }\n\n  renderConfirmationPanel(render) {\n    if (!render) {\n      return null;\n    }\n\n    const {localize: _} = this.context;\n    const {messages} = this.state;\n\n    const onCancel = () => {\n      this.setState({\n        nextTab: null,\n      });\n    };\n\n    const onContinue = () => {\n      const {nextTab} = this.state;\n      const {onChange, value} = this.props;\n\n      // Set next tab as active\n      this.setState({\n        currentTab: nextTab,\n        nextTab: null,\n      });\n\n      // Convert the annotation\n      const convertedValue = this.convertValue(value, nextTab);\n      onChange(convertedValue);\n    };\n\n    return (\n      <div className=\"multi-format-editor__confirmation-panel\">\n        <div className=\"multi-format-editor__confirmation-panel__content\">\n          <h3 className=\"multi-format-editor__confirmation-panel__header\">\n            {_('Heads up!')}\n          </h3>\n          <div className=\"multi-format-editor__confirmation-panel__message\">\n            <p className=\"multi-format-editor__confirmation-panel__message-primary\">\n              {messages[0]}\n            </p>\n            <p className=\"multi-format-editor__confirmation-panel__message-secondary\">\n              {messages[1]}\n            </p>\n          </div>\n        </div>\n        <div className=\"multi-format-editor__confirmation-panel__actions\">\n          <Button\n            variant=\"default\"\n            className=\"multi-format-editor__confirmation-panel__cancel-button\"\n            onClick={onCancel}\n          >\n            {_('Go back')}\n          </Button>\n          <Button\n            variant=\"primary\"\n            className=\"multi-format-editor__confirmation-panel__continue-button\"\n            onClick={onContinue}\n          >\n            {_('Continue')}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  renderEditor(render) {\n    if (!render) {\n      return null;\n    }\n    const {localize: _} = this.context;\n    const {onChange, placeholder, value} = this.props;\n\n    const {currentTab} = this.state;\n\n    const richTextClassNames = classnames(\n      'multi-format-editor__tab',\n      'top-tab',\n      'left',\n      {selected: currentTab === 'RICH_TEXT'}\n    );\n    const latexClassNames = classnames(\n      'multi-format-editor__tab',\n      'top-tab',\n      'right',\n      {selected: currentTab === 'LATEX'}\n    );\n    const bottomTabClassNames = classnames(\n      'multi-format-editor__tab',\n      'bottom-tab'\n    );\n\n    const Editor = this.editors.filter(editor => editor.key === currentTab)[0]\n      .component;\n\n    const ModeTabsText = this.editors.map(editor => editor.label);\n\n    const showBottomTab = currentTab === 'HTML' || currentTab === 'RICH_TEXT';\n    const BottomTab =\n      currentTab === 'HTML' ? (\n        <div\n          className={bottomTabClassNames}\n          onClick={() => this.onModeChange('RICH_TEXT')}\n        >\n          {_('Edit in Rich Text')}\n        </div>\n      ) : (\n        <div\n          className={bottomTabClassNames}\n          onClick={() => this.onModeChange('HTML')}\n        >\n          {_('Edit in HTML')}\n        </div>\n      );\n\n    return (\n      <div className=\"multi-format-editor__root__wrapper\">\n        <div className=\"multi-format-editor__tabs\">\n          <div\n            className={richTextClassNames}\n            onClick={() => this.onModeChange('RICH_TEXT')}\n          >\n            {ModeTabsText[0]}\n          </div>\n          <div\n            className={latexClassNames}\n            onClick={() => this.onModeChange('LATEX')}\n          >\n            {ModeTabsText[1]}\n          </div>\n        </div>\n        <div\n          className={`multi-format-editor__content__wrapper__${currentTab.toLowerCase()}`}\n        >\n          <Editor\n            className={`multi-format-editor__${currentTab.toLowerCase()}`}\n            onChange={onChange}\n            placeholder={placeholder}\n            value={value}\n          />\n        </div>\n        {showBottomTab ? BottomTab : null}\n      </div>\n    );\n  }\n\n  render() {\n    /*\n     * `renderConfirmationPanel` and `renderEditor` are mutually\n     * exclusive; only one will return a component.\n     */\n    const {nextTab} = this.state;\n    const content =\n      this.renderConfirmationPanel(nextTab !== null) ||\n      this.renderEditor(nextTab === null);\n\n    return <div className=\"multi-format-editor__root\">{content}</div>;\n  }\n}\n\nMultiFormatTextEditor.propTypes = {\n  defaultValuePattern: PropTypes.instanceOf(RegExp),\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string,\n};\n\nMultiFormatTextEditor.defaultProps = {\n  defaultValuePattern: /^$/,\n  placeholder: '',\n  value: '',\n};\n\nMultiFormatTextEditor.contextTypes = {\n  localize: PropTypes.func,\n};\n\nexport default MultiFormatTextEditor;\n"]}