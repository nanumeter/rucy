{"version":3,"sources":["../../../src/components/containers/ShapeAccordion.js"],"names":["ShapeFold","ShapeAccordion","context","layout","shapes","_","localize","props","canAdd","children","content","length","map","shp","i","text","addAction","label","handler","updateContainer","shapeIndex","Array","isArray","key","value","line","color","fillcolor","opacity","contextTypes","object","func","propTypes","node","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,oDAAlB;;IAEMC,c;;;;;;;;;;;6BACK;AAAA,qBAIH,KAAKC,OAJF;AAAA,2CAELC,MAFK,CAEIC,MAFJ;AAAA,UAEIA,MAFJ,yCAEa,EAFb;AAAA,UAGKC,CAHL,YAGLC,QAHK;AAAA,mBAKoB,KAAKC,KALzB;AAAA,UAKAC,MALA,UAKAA,MALA;AAAA,UAKQC,QALR,UAKQA,QALR;;;AAOP,UAAMC,UACJN,OAAOO,MAAP,IACAP,OAAOQ,GAAP,CAAW,UAACC,GAAD,EAAMC,CAAN;AAAA,eACT;AAAC,mBAAD;AAAA,YAAW,KAAKA,CAAhB,EAAmB,YAAYA,CAA/B,EAAkC,MAAMD,IAAIE,IAA5C,EAAkD,WAAWP,MAA7D;AACGC;AADH,SADS;AAAA,OAAX,CAFF;;AAQA,UAAMO,YAAY;AAChBC,eAAOZ,EAAE,OAAF,CADS;AAEhBa,iBAAS,uBAA+B;AAAA,cAA7Bf,MAA6B,QAA7BA,MAA6B;AAAA,cAArBgB,eAAqB,QAArBA,eAAqB;;AACtC,cAAIC,mBAAJ;AACA,cAAIC,MAAMC,OAAN,CAAcnB,OAAOC,MAArB,CAAJ,EAAkC;AAChCgB,yBAAajB,OAAOC,MAAP,CAAcO,MAA3B;AACD,WAFD,MAEO;AACLS,yBAAa,CAAb;AACD;;AAED,cAAMG,kBAAgBH,UAAhB,MAAN;AACA,cAAMI,QAAQ;AACZT,kBAASV,EAAE,OAAF,CAAT,SAAuBe,UADX;AAEZK,kBAAM,EAACC,OAAO,SAAR,EAFM;AAGZC,uBAAW,SAHC;AAIZC,qBAAS;AAJG,WAAd;;AAOA,cAAIT,eAAJ,EAAqB;AACnBA,gDAAkBI,GAAlB,EAAwBC,KAAxB;AACD;AACF;AArBe,OAAlB;;AAwBA,aACE;AAAA;AAAA,UAAoB,WAAWhB,SAASQ,SAAT,GAAqB,IAApD;AACGN,kBAAUA,OAAV,GAAoB;AADvB,OADF;AAKD;;;;;;AAGHT,eAAe4B,YAAf,GAA8B;AAC5B1B,UAAQ,oBAAU2B,MADU;AAE5BxB,YAAU,oBAAUyB;AAFQ,CAA9B;;AAKA9B,eAAe+B,SAAf,GAA2B;AACzBvB,YAAU,oBAAUwB,IADK;AAEzBzB,UAAQ,oBAAU0B;AAFO,CAA3B;;kBAKejC,c","file":"ShapeAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectShapeToLayout} from 'lib';\n\nconst ShapeFold = connectShapeToLayout(PlotlyFold);\n\nclass ShapeAccordion extends Component {\n  render() {\n    const {\n      layout: {shapes = []},\n      localize: _,\n    } = this.context;\n    const {canAdd, children} = this.props;\n\n    const content =\n      shapes.length &&\n      shapes.map((shp, i) => (\n        <ShapeFold key={i} shapeIndex={i} name={shp.text} canDelete={canAdd}>\n          {children}\n        </ShapeFold>\n      ));\n\n    const addAction = {\n      label: _('Shape'),\n      handler: ({layout, updateContainer}) => {\n        let shapeIndex;\n        if (Array.isArray(layout.shapes)) {\n          shapeIndex = layout.shapes.length;\n        } else {\n          shapeIndex = 0;\n        }\n\n        const key = `shapes[${shapeIndex}]`;\n        const value = {\n          text: `${_('Shape')} ${shapeIndex}`,\n          line: {color: '#444444'},\n          fillcolor: '#7F7F7F',\n          opacity: 0.3,\n        };\n\n        if (updateContainer) {\n          updateContainer({[key]: value});\n        }\n      },\n    };\n\n    return (\n      <TraceRequiredPanel addAction={canAdd ? addAction : null}>\n        {content ? content : null}\n      </TraceRequiredPanel>\n    );\n  }\n}\n\nShapeAccordion.contextTypes = {\n  layout: PropTypes.object,\n  localize: PropTypes.func,\n};\n\nShapeAccordion.propTypes = {\n  children: PropTypes.node,\n  canAdd: PropTypes.bool,\n};\n\nexport default ShapeAccordion;\n"]}