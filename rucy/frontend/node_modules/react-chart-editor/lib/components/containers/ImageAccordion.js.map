{"version":3,"sources":["../../../src/components/containers/ImageAccordion.js"],"names":["ImageFold","ImageAccordion","context","layout","images","_","localize","props","canAdd","children","content","length","map","img","i","text","addAction","label","handler","updateContainer","imageIndex","Array","isArray","key","value","sizex","sizey","x","y","contextTypes","object","func","propTypes","node","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,oDAAlB;;IAEMC,c;;;;;;;;;;;6BACK;AAAA,qBAIH,KAAKC,OAJF;AAAA,2CAELC,MAFK,CAEIC,MAFJ;AAAA,UAEIA,MAFJ,yCAEa,EAFb;AAAA,UAGKC,CAHL,YAGLC,QAHK;AAAA,mBAKoB,KAAKC,KALzB;AAAA,UAKAC,MALA,UAKAA,MALA;AAAA,UAKQC,QALR,UAKQA,QALR;;;AAOP,UAAMC,UACJN,OAAOO,MAAP,IACAP,OAAOQ,GAAP,CAAW,UAACC,GAAD,EAAMC,CAAN;AAAA,eACT;AAAC,mBAAD;AAAA,YAAW,KAAKA,CAAhB,EAAmB,YAAYA,CAA/B,EAAkC,MAAMD,IAAIE,IAA5C,EAAkD,WAAWP,MAA7D;AACGC;AADH,SADS;AAAA,OAAX,CAFF;;AAQA,UAAMO,YAAY;AAChBC,eAAOZ,EAAE,OAAF,CADS;AAEhBa,iBAAS,uBAA+B;AAAA,cAA7Bf,MAA6B,QAA7BA,MAA6B;AAAA,cAArBgB,eAAqB,QAArBA,eAAqB;;AACtC,cAAIC,mBAAJ;AACA,cAAIC,MAAMC,OAAN,CAAcnB,OAAOC,MAArB,CAAJ,EAAkC;AAChCgB,yBAAajB,OAAOC,MAAP,CAAcO,MAA3B;AACD,WAFD,MAEO;AACLS,yBAAa,CAAb;AACD;;AAED,cAAMG,kBAAgBH,UAAhB,MAAN;AACA,cAAMI,QAAQ;AACZT,kBAASV,EAAE,OAAF,CAAT,UAAuBe,aAAa,CAApC,CADY;AAEZK,mBAAO,GAFK;AAGZC,mBAAO,GAHK;AAIZC,eAAG,GAJS;AAKZC,eAAG;AALS,WAAd;;AAQA,cAAIT,eAAJ,EAAqB;AACnBA,gDAAkBI,GAAlB,EAAwBC,KAAxB;AACD;AACF;AAtBe,OAAlB;;AAyBA,aACE;AAAA;AAAA,UAAoB,WAAWhB,SAASQ,SAAT,GAAqB,IAApD;AACGN,kBAAUA,OAAV,GAAoB;AADvB,OADF;AAKD;;;;;;AAGHT,eAAe4B,YAAf,GAA8B;AAC5B1B,UAAQ,oBAAU2B,MADU;AAE5BxB,YAAU,oBAAUyB;AAFQ,CAA9B;;AAKA9B,eAAe+B,SAAf,GAA2B;AACzBvB,YAAU,oBAAUwB,IADK;AAEzBzB,UAAQ,oBAAU0B;AAFO,CAA3B;;kBAKejC,c","file":"ImageAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectImageToLayout} from 'lib';\n\nconst ImageFold = connectImageToLayout(PlotlyFold);\n\nclass ImageAccordion extends Component {\n  render() {\n    const {\n      layout: {images = []},\n      localize: _,\n    } = this.context;\n    const {canAdd, children} = this.props;\n\n    const content =\n      images.length &&\n      images.map((img, i) => (\n        <ImageFold key={i} imageIndex={i} name={img.text} canDelete={canAdd}>\n          {children}\n        </ImageFold>\n      ));\n\n    const addAction = {\n      label: _('Image'),\n      handler: ({layout, updateContainer}) => {\n        let imageIndex;\n        if (Array.isArray(layout.images)) {\n          imageIndex = layout.images.length;\n        } else {\n          imageIndex = 0;\n        }\n\n        const key = `images[${imageIndex}]`;\n        const value = {\n          text: `${_('Image')} ${imageIndex + 1}`,\n          sizex: 0.1,\n          sizey: 0.1,\n          x: 0.5,\n          y: 0.5,\n        };\n\n        if (updateContainer) {\n          updateContainer({[key]: value});\n        }\n      },\n    };\n\n    return (\n      <TraceRequiredPanel addAction={canAdd ? addAction : null}>\n        {content ? content : null}\n      </TraceRequiredPanel>\n    );\n  }\n}\n\nImageAccordion.contextTypes = {\n  layout: PropTypes.object,\n  localize: PropTypes.func,\n};\n\nImageAccordion.propTypes = {\n  children: PropTypes.node,\n  canAdd: PropTypes.bool,\n};\n\nexport default ImageAccordion;\n"]}