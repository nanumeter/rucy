{"version":3,"sources":["../../../src/components/containers/TraceAccordion.js"],"names":["TraceFold","TraceAccordion","context","data","_","localize","props","canAdd","canGroup","children","messageIfEmptyFold","excludeFits","filteredData","filter","t","transforms","every","tr","type","individualTraces","length","map","d","i","addAction","label","handler","onUpdate","ADD_TRACE","tracesByGroup","reduce","allTraces","nextTrace","index","traceType","push","groupedTraces","Object","keys","contextTypes","fullData","array","func","propTypes","bool","node","string"],"mappings":"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","file":"TraceAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PlotlyPanel from './PlotlyPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {EDITOR_ACTIONS} from 'lib/constants';\nimport {connectTraceToPlot, plotlyTraceToCustomTrace} from 'lib';\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\n\nconst TraceFold = connectTraceToPlot(PlotlyFold);\n\nclass TraceAccordion extends Component {\n  render() {\n    const {data = [], localize: _} = this.context;\n    const {\n      canAdd,\n      canGroup,\n      children,\n      messageIfEmptyFold,\n      excludeFits,\n    } = this.props;\n\n    // we don't want to include analysis transforms when we're in the create panel\n    const filteredData = data.filter(t => {\n      if (excludeFits) {\n        return !(t.transforms && t.transforms.every(tr => tr.type === 'fit'));\n      }\n      return true;\n    });\n\n    const individualTraces =\n      filteredData.length &&\n      filteredData.map((d, i) => {\n        return (\n          <TraceFold\n            key={i}\n            traceIndexes={[i]}\n            canDelete={canAdd}\n            messageIfEmpty={messageIfEmptyFold}\n          >\n            {children}\n          </TraceFold>\n        );\n      });\n\n    if (canAdd) {\n      const addAction = {\n        label: _('Trace'),\n        handler: ({onUpdate}) => {\n          if (onUpdate) {\n            onUpdate({\n              type: EDITOR_ACTIONS.ADD_TRACE,\n            });\n          }\n        },\n      };\n      return (\n        <PlotlyPanel addAction={addAction}>\n          {individualTraces ? individualTraces : null}\n        </PlotlyPanel>\n      );\n    }\n    const tracesByGroup = filteredData.reduce((allTraces, nextTrace, index) => {\n      const traceType = plotlyTraceToCustomTrace(nextTrace);\n      if (!allTraces[traceType]) {\n        allTraces[traceType] = [];\n      }\n      allTraces[traceType].push(index);\n      return allTraces;\n    }, {});\n\n    const groupedTraces = Object.keys(tracesByGroup).map((traceType, index) => {\n      return (\n        <TraceFold\n          key={index}\n          traceIndexes={tracesByGroup[traceType]}\n          name={traceType}\n        >\n          {this.props.children}\n        </TraceFold>\n      );\n    });\n\n    if (canGroup && filteredData.length > 1 && groupedTraces.length > 0) {\n      return (\n        <TraceRequiredPanel noPadding>\n          <Tabs>\n            <TabList>\n              <Tab>{_('All Traces')}</Tab>\n              <Tab>{_('Individual')}</Tab>\n            </TabList>\n            <TabPanel>\n              <PlotlyPanel>{groupedTraces ? groupedTraces : null}</PlotlyPanel>\n            </TabPanel>\n            <TabPanel>\n              <PlotlyPanel>\n                {individualTraces ? individualTraces : null}\n              </PlotlyPanel>\n            </TabPanel>\n          </Tabs>\n        </TraceRequiredPanel>\n      );\n    }\n    return (\n      <TraceRequiredPanel>\n        {individualTraces ? individualTraces : null}\n      </TraceRequiredPanel>\n    );\n  }\n}\n\nTraceAccordion.contextTypes = {\n  fullData: PropTypes.array,\n  data: PropTypes.array,\n  localize: PropTypes.func,\n};\n\nTraceAccordion.propTypes = {\n  canAdd: PropTypes.bool,\n  canGroup: PropTypes.bool,\n  children: PropTypes.node,\n  excludeFits: PropTypes.bool,\n  messageIfEmptyFold: PropTypes.string,\n};\n\nexport default TraceAccordion;\n"]}