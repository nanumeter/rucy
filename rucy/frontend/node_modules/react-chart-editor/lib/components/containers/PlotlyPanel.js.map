{"version":3,"sources":["../../../src/components/containers/PlotlyPanel.js"],"names":["PanelErrorImpl","_","context","localize","contextTypes","func","PanelError","Panel","props","state","individualFoldStates","hasError","toggleFolds","bind","toggleFold","deleteContainer","deleteAction","setState","hasOpen","length","some","s","map","index","$toggle","numFolds","Children","forEach","children","child","type","plotly_editor_traits","foldable","newFoldStates","Array","fill","addAction","e","i","calculateFolds","newChildren","key","folded","noPadding","showExpandCollapse","propTypes","object","node","bool","defaultProps","childContextTypes","PlotlyPanel","no_visibility_forcing"],"mappings":"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","file":"PlotlyPanel.js","sourcesContent":["import PanelHeader from './PanelHeader';\nimport PanelEmpty from './PanelEmpty';\nimport PropTypes from 'prop-types';\nimport React, {Component, cloneElement} from 'react';\nimport update from 'immutability-helper';\nimport {bem} from 'lib';\nimport {EmbedIconIcon} from 'plotly-icons';\n\nclass PanelErrorImpl extends Component {\n  render() {\n    const {localize: _} = this.context;\n\n    return (\n      <PanelEmpty\n        icon={EmbedIconIcon}\n        heading={_('Well this is embarrassing.')}\n        message={_('This panel could not be displayed due to an error.')}\n      />\n    );\n  }\n}\n\nPanelErrorImpl.contextTypes = {\n  localize: PropTypes.func,\n};\n\nconst PanelError = PanelErrorImpl;\n\nexport class Panel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      individualFoldStates: [],\n      hasError: false,\n    };\n    this.toggleFolds = this.toggleFolds.bind(this);\n    this.toggleFold = this.toggleFold.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      deleteContainer: this.props.deleteAction ? this.props.deleteAction : null,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({hasError: true});\n  }\n\n  toggleFolds() {\n    const {individualFoldStates} = this.state;\n    const hasOpen =\n      individualFoldStates.length > 0 &&\n      individualFoldStates.some(s => s !== true);\n    this.setState({\n      individualFoldStates: individualFoldStates.map(() => hasOpen),\n    });\n  }\n\n  toggleFold(index) {\n    this.setState(\n      update(this.state, {individualFoldStates: {$toggle: [index]}})\n    );\n  }\n\n  calculateFolds() {\n    // to get proper number of child folds and initialize component state\n    let numFolds = 0;\n\n    React.Children.forEach(this.props.children, child => {\n      if ((child.type.plotly_editor_traits || {}).foldable) {\n        numFolds++;\n      }\n    });\n\n    if (this.state.individualFoldStates.length !== numFolds) {\n      const newFoldStates = new Array(numFolds).fill(false);\n      this.setState({\n        individualFoldStates: this.props.addAction\n          ? newFoldStates.map((e, i) => i !== numFolds - 1)\n          : newFoldStates,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.calculateFolds();\n  }\n  componentDidMount() {\n    this.calculateFolds();\n  }\n\n  render() {\n    const {individualFoldStates, hasError} = this.state;\n\n    if (hasError) {\n      return <PanelError />;\n    }\n\n    const newChildren = React.Children.map(\n      this.props.children,\n      (child, index) => {\n        if ((child.type.plotly_editor_traits || {}).foldable) {\n          return cloneElement(child, {\n            key: index,\n            folded: individualFoldStates[index] || false,\n            toggleFold: () => this.toggleFold(index),\n          });\n        }\n        return child;\n      }\n    );\n\n    return (\n      <div\n        className={`panel${this.props.noPadding ? ' panel--no-padding' : ''}`}\n      >\n        <PanelHeader\n          addAction={this.props.addAction}\n          allowCollapse={\n            this.props.showExpandCollapse && individualFoldStates.length > 1\n          }\n          toggleFolds={this.toggleFolds}\n          hasOpen={individualFoldStates.some(s => s === false)}\n        />\n        <div className={bem('panel', 'content')}>{newChildren}</div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  addAction: PropTypes.object,\n  children: PropTypes.node,\n  deleteAction: PropTypes.func,\n  noPadding: PropTypes.bool,\n  showExpandCollapse: PropTypes.bool,\n};\n\nPanel.defaultProps = {\n  showExpandCollapse: true,\n};\n\nPanel.contextTypes = {\n  localize: PropTypes.func,\n};\n\nPanel.childContextTypes = {\n  deleteContainer: PropTypes.func,\n};\n\nclass PlotlyPanel extends Panel {}\n\nPlotlyPanel.plotly_editor_traits = {\n  no_visibility_forcing: true,\n};\n\nexport default PlotlyPanel;\n"]}