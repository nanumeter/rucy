{"version":3,"sources":["../../../src/components/containers/AnnotationAccordion.js"],"names":["AnnotationFold","AnnotationAccordion","context","layout","annotations","_","localize","props","canAdd","children","content","length","map","ann","i","text","addAction","label","handler","updateContainer","annotationIndex","Array","isArray","key","value","contextTypes","object","func","propTypes","node","bool"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,yDAAvB;;IAEMC,mB;;;;;;;;;;;6BACK;AAAA,qBAIH,KAAKC,OAJF;AAAA,2CAELC,MAFK,CAEIC,WAFJ;AAAA,UAEIA,WAFJ,yCAEkB,EAFlB;AAAA,UAGKC,CAHL,YAGLC,QAHK;AAAA,mBAKoB,KAAKC,KALzB;AAAA,UAKAC,MALA,UAKAA,MALA;AAAA,UAKQC,QALR,UAKQA,QALR;;;AAOP,UAAMC,UACJN,YAAYO,MAAZ,IACAP,YAAYQ,GAAZ,CAAgB,UAACC,GAAD,EAAMC,CAAN;AAAA,eACd;AAAC,wBAAD;AAAA;AACE,iBAAKA,CADP;AAEE,6BAAiBA,CAFnB;AAGE,kBAAMD,IAAIE,IAHZ;AAIE,uBAAWP;AAJb;AAMGC;AANH,SADc;AAAA,OAAhB,CAFF;;AAaA,UAAMO,YAAY;AAChBC,eAAOZ,EAAE,YAAF,CADS;AAEhBa,iBAAS,uBAA+B;AAAA,cAA7Bf,MAA6B,QAA7BA,MAA6B;AAAA,cAArBgB,eAAqB,QAArBA,eAAqB;;AACtC,cAAIC,wBAAJ;AACA,cAAIC,MAAMC,OAAN,CAAcnB,OAAOC,WAArB,CAAJ,EAAuC;AACrCgB,8BAAkBjB,OAAOC,WAAP,CAAmBO,MAArC;AACD,WAFD,MAEO;AACLS,8BAAkB,CAAlB;AACD;;AAED,cAAMG,uBAAqBH,eAArB,MAAN;AACA,cAAMI,QAAQ,EAACT,MAAMV,EAAE,UAAF,CAAP,EAAd;;AAEA,cAAIc,eAAJ,EAAqB;AACnBA,gDAAkBI,GAAlB,EAAwBC,KAAxB;AACD;AACF;AAhBe,OAAlB;;AAmBA,aACE;AAAA;AAAA,UAAoB,WAAWhB,SAASQ,SAAT,GAAqB,IAApD;AACGN,kBAAUA,OAAV,GAAoB;AADvB,OADF;AAKD;;;;;;AAGHT,oBAAoBwB,YAApB,GAAmC;AACjCtB,UAAQ,oBAAUuB,MADe;AAEjCpB,YAAU,oBAAUqB;AAFa,CAAnC;;AAKA1B,oBAAoB2B,SAApB,GAAgC;AAC9BnB,YAAU,oBAAUoB,IADU;AAE9BrB,UAAQ,oBAAUsB;AAFY,CAAhC;;kBAKe7B,mB","file":"AnnotationAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectAnnotationToLayout} from 'lib';\n\nconst AnnotationFold = connectAnnotationToLayout(PlotlyFold);\n\nclass AnnotationAccordion extends Component {\n  render() {\n    const {\n      layout: {annotations = []},\n      localize: _,\n    } = this.context;\n    const {canAdd, children} = this.props;\n\n    const content =\n      annotations.length &&\n      annotations.map((ann, i) => (\n        <AnnotationFold\n          key={i}\n          annotationIndex={i}\n          name={ann.text}\n          canDelete={canAdd}\n        >\n          {children}\n        </AnnotationFold>\n      ));\n\n    const addAction = {\n      label: _('Annotation'),\n      handler: ({layout, updateContainer}) => {\n        let annotationIndex;\n        if (Array.isArray(layout.annotations)) {\n          annotationIndex = layout.annotations.length;\n        } else {\n          annotationIndex = 0;\n        }\n\n        const key = `annotations[${annotationIndex}]`;\n        const value = {text: _('new text')};\n\n        if (updateContainer) {\n          updateContainer({[key]: value});\n        }\n      },\n    };\n\n    return (\n      <TraceRequiredPanel addAction={canAdd ? addAction : null}>\n        {content ? content : null}\n      </TraceRequiredPanel>\n    );\n  }\n}\n\nAnnotationAccordion.contextTypes = {\n  layout: PropTypes.object,\n  localize: PropTypes.func,\n};\n\nAnnotationAccordion.propTypes = {\n  children: PropTypes.node,\n  canAdd: PropTypes.bool,\n};\n\nexport default AnnotationAccordion;\n"]}