{"version":3,"sources":["../../../src/components/containers/UpdateMenuAccordion.js"],"names":["UpdateMenuFold","UpdateMenuAccordion","context","fullLayout","updatemenus","_","localize","children","props","content","length","map","upd","i","localizedType","dropdown","buttons","updateMenuType","type","activeElementLabel","filter","b","_index","active","label","heading","message","contextTypes","object","func","propTypes","node"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,iBAAiB,yDAAvB;;IAEMC,mB;;;;;;;;;;;6BACK;AAAA,qBAIH,KAAKC,OAJF;AAAA,2CAELC,UAFK,CAEQC,WAFR;AAAA,UAEQA,WAFR,yCAEsB,EAFtB;AAAA,UAGKC,CAHL,YAGLC,QAHK;AAAA,UAKAC,QALA,GAKY,KAAKC,KALjB,CAKAD,QALA;;;AAOP,UAAME,UACJL,YAAYM,MAAZ,GAAqB,CAArB,IACAN,YAAYO,GAAZ,CAAgB,UAACC,GAAD,EAAMC,CAAN,EAAY;AAC1B,YAAMC,gBAAgB;AACpBC,oBAAUV,EAAE,UAAF,CADU;AAEpBW,mBAASX,EAAE,SAAF;AAFW,SAAtB;AAIA,YAAMY,iBACJH,cAAcF,IAAIM,IAAlB,KAA2BJ,cAAcC,QAD3C;AAEA,YAAMI,qBAAqBP,IAAII,OAAJ,CAAYI,MAAZ,CACzB;AAAA,iBAAKC,EAAEC,MAAF,KAAaV,IAAIW,MAAtB;AAAA,SADyB,EAEzB,CAFyB,EAEtBC,KAFL;;AAIA,eACE;AAAC,wBAAD;AAAA;AACE,iBAAKX,CADP;AAEE,6BAAiBA,CAFnB;AAGE,kBAAMI,iBAAiB,IAAjB,GAAwBE;AAHhC;AAKGZ;AALH,SADF;AASD,OApBD,CAFF;;AAwBA,aACE;AAAA;AAAA;AACE,2BAAiB,CAAC;AAAA,mBAAMH,YAAYM,MAAZ,GAAqB,CAA3B;AAAA,WAAD,CADnB;AAEE,mCAAyB,CACvB;AACEe,qBAASpB,EAAE,iDAAF,CADX;AAEEqB,qBAAS;AAFX,WADuB;AAF3B;AASGjB,kBAAUA,OAAV,GAAoB;AATvB,OADF;AAaD;;;;;;AAGHR,oBAAoB0B,YAApB,GAAmC;AACjCxB,cAAY,oBAAUyB,MADW;AAEjCtB,YAAU,oBAAUuB;AAFa,CAAnC;;AAKA5B,oBAAoB6B,SAApB,GAAgC;AAC9BvB,YAAU,oBAAUwB;AADU,CAAhC;;kBAIe9B,mB","file":"UpdateMenuAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport TraceRequiredPanel from './TraceRequiredPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectUpdateMenuToLayout} from 'lib';\n\nconst UpdateMenuFold = connectUpdateMenuToLayout(PlotlyFold);\n\nclass UpdateMenuAccordion extends Component {\n  render() {\n    const {\n      fullLayout: {updatemenus = []},\n      localize: _,\n    } = this.context;\n    const {children} = this.props;\n\n    const content =\n      updatemenus.length > 0 &&\n      updatemenus.map((upd, i) => {\n        const localizedType = {\n          dropdown: _('Dropdown'),\n          buttons: _('Buttons'),\n        };\n        const updateMenuType =\n          localizedType[upd.type] || localizedType.dropdown;\n        const activeElementLabel = upd.buttons.filter(\n          b => b._index === upd.active\n        )[0].label;\n\n        return (\n          <UpdateMenuFold\n            key={i}\n            updateMenuIndex={i}\n            name={updateMenuType + ': ' + activeElementLabel}\n          >\n            {children}\n          </UpdateMenuFold>\n        );\n      });\n\n    return (\n      <TraceRequiredPanel\n        extraConditions={[() => updatemenus.length > 0]}\n        extraEmptyPanelMessages={[\n          {\n            heading: _('There are no update menus to style in your plot'),\n            message: '',\n          },\n        ]}\n      >\n        {content ? content : null}\n      </TraceRequiredPanel>\n    );\n  }\n}\n\nUpdateMenuAccordion.contextTypes = {\n  fullLayout: PropTypes.object,\n  localize: PropTypes.func,\n};\n\nUpdateMenuAccordion.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default UpdateMenuAccordion;\n"]}