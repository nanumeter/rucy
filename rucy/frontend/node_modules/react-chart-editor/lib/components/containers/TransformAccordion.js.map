{"version":3,"sources":["../../../src/components/containers/TransformAccordion.js"],"names":["TransformFold","TransformAccordion","context","fullContainer","transforms","_","localize","container","dataSourceOptions","children","props","transformTypes","label","type","transformableCharts","includes","transformBy","map","foldNameSuffix","tr","groupssrc","find","d","value","targetsrc","filteredTransforms","filter","Boolean","content","length","i","addAction","handler","updateContainer","transformIndex","Array","isArray","key","payload","groups","contextTypes","object","func","array","propTypes","node"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,uDAAtB;;IAEMC,kB;;;;;;;;;;;6BACK;AAAA,qBAOH,KAAKC,OAPF;AAAA,UAELC,aAFK,YAELA,aAFK;AAAA,2CAGLA,aAHK,CAGWC,UAHX;AAAA,UAGWA,UAHX,yCAGwB,EAHxB;AAAA,UAIKC,CAJL,YAILC,QAJK;AAAA,UAKLC,SALK,YAKLA,SALK;AAAA,UAMLC,iBANK,YAMLA,iBANK;AAAA,UAQAC,QARA,GAQY,KAAKC,KARjB,CAQAD,QARA;;;AAUP,UAAME,iBAAiB,CACrB,EAACC,OAAOP,EAAE,QAAF,CAAR,EAAqBQ,MAAM,QAA3B,EADqB,EAErB,EAACD,OAAOP,EAAE,OAAF,CAAR,EAAoBQ,MAAM,SAA1B,EAFqB,EAGrB,EAACD,OAAOP,EAAE,WAAF,CAAR,EAAwBQ,MAAM,WAA9B,EAHqB,CAAvB;;AAMA,UAAMC,sBAAsB,CAC1B,SAD0B,EAE1B,KAF0B,EAG1B,WAH0B,EAI1B,WAJ0B,EAK1B,aAL0B,EAM1B,KAN0B,EAO1B,QAP0B,CAA5B;;AAUA,UAAI,CAACA,oBAAoBC,QAApB,CAA6BZ,cAAcU,IAA3C,CAAL,EAAuD;AACrD,eACE;AACE,4CADF;AAEE,0BAAgBR,EAAE,6CAAF;AAFlB,UADF;AAMD;;AAED,UAAMW,cACJT,UAAUH,UAAV,IACAG,UAAUH,UAAV,CAAqBa,GAArB,CAAyB,cAAM;AAC7B,YAAIC,iBAAiB,EAArB;AACA,YAAIC,GAAGC,SAAP,EAAkB;AAChB,cAAMA,YACJZ,qBACAA,kBAAkBa,IAAlB,CAAuB;AAAA,mBAAKC,EAAEC,KAAF,KAAYJ,GAAGC,SAApB;AAAA,WAAvB,CAFF;AAGAF,mCACEE,aAAaA,UAAUR,KAAvB,GAA+BQ,UAAUR,KAAzC,GAAiDO,GAAGC,SADtD;AAGD,SAPD,MAOO,IAAID,GAAGK,SAAP,EAAkB;AACvB,cAAMA,YACJhB,qBACAA,kBAAkBa,IAAlB,CAAuB;AAAA,mBAAKC,EAAEC,KAAF,KAAYJ,GAAGK,SAApB;AAAA,WAAvB,CAFF;AAGAN,mCACEM,aAAaA,UAAUZ,KAAvB,GAA+BY,UAAUZ,KAAzC,GAAiDO,GAAGK,SADtD;AAGD;AACD,eAAON,cAAP;AACD,OAlBD,CAFF;;AAsBA,UAAMO,qBAAqBrB,WAAWsB,MAAX,CAAkB;AAAA,YAAEb,IAAF,QAAEA,IAAF;AAAA,eAAYc,QAAQd,IAAR,CAAZ;AAAA,OAAlB,CAA3B;AACA,UAAMe,UACJH,mBAAmBI,MAAnB,IACAJ,mBAAmBR,GAAnB,CAAuB,UAACE,EAAD,EAAKW,CAAL;AAAA,eACrB;AAAC,uBAAD;AAAA;AACE,iBAAKA,CADP;AAEE,4BAAgBA,CAFlB;AAGE,uBACEnB,eAAee,MAAf,CAAsB;AAAA,kBAAEb,IAAF,SAAEA,IAAF;AAAA,qBAAYA,SAASM,GAAGN,IAAxB;AAAA,aAAtB,EAAoD,CAApD,EAAuDD,KADzD,IAEGI,eAAeA,YAAYc,CAAZ,CAFlB,CAHF;AAME,uBAAW;AANb;AAQGrB;AARH,SADqB;AAAA,OAAvB,CAFF;;AAeA,UAAMsB,YAAY;AAChBnB,eAAOP,EAAE,WAAF,CADS;AAEhB2B,iBAASrB,eAAeM,GAAf,CAAmB,iBAAmB;AAAA,cAAjBL,KAAiB,SAAjBA,KAAiB;AAAA,cAAVC,IAAU,SAAVA,IAAU;;AAC7C,iBAAO;AACLD,wBADK;AAELoB,qBAAS,0BAAW;AAAA,kBACX7B,aADW,GACuBD,OADvB,CACXC,aADW;AAAA,kBACI8B,eADJ,GACuB/B,OADvB,CACI+B,eADJ;;AAElB,kBAAIA,eAAJ,EAAqB;AACnB,oBAAMC,iBAAiBC,MAAMC,OAAN,CAAcjC,cAAcC,UAA5B,IACnBD,cAAcC,UAAd,CAAyByB,MADN,GAEnB,CAFJ;AAGA,oBAAMQ,sBAAoBH,cAApB,MAAN;;AAEA,oBAAMI,UAAU,EAACzB,UAAD,EAAhB;AACA,oBAAIA,SAAS,QAAb,EAAuB;AACrByB,0BAAQd,SAAR,GAAoB,IAApB;AACD,iBAFD,MAEO;AACLc,0BAAQlB,SAAR,GAAoB,IAApB;AACAkB,0BAAQC,MAAR,GAAiB,IAAjB;AACD;;AAEDN,oDAAkBI,GAAlB,EAAwBC,OAAxB;AACD;AACF;AApBI,WAAP;AAsBD,SAvBQ;AAFO,OAAlB;;AA4BA,aACE;AAAA;AAAA,UAAa,WAAWP,SAAxB;AACGH,kBAAUA,OAAV,GAAoB;AADvB,OADF;AAKD;;;;;;AAGH3B,mBAAmBuC,YAAnB,GAAkC;AAChCrC,iBAAe,oBAAUsC,MADO;AAEhCnC,YAAU,oBAAUoC,IAFY;AAGhCnC,aAAW,oBAAUkC,MAHW;AAIhCjC,qBAAmB,oBAAUmC;AAJG,CAAlC;;AAOA1C,mBAAmB2C,SAAnB,GAA+B;AAC7BnC,YAAU,oBAAUoC;AADS,CAA/B;;kBAIe5C,kB","file":"TransformAccordion.js","sourcesContent":["import PlotlyFold from './PlotlyFold';\nimport PlotlyPanel from './PlotlyPanel';\nimport PropTypes from 'prop-types';\nimport React, {Component} from 'react';\nimport {connectTransformToTrace} from 'lib';\nimport FoldEmpty from './FoldEmpty';\nimport {PlotScatterIcon} from 'plotly-icons';\n\nconst TransformFold = connectTransformToTrace(PlotlyFold);\n\nclass TransformAccordion extends Component {\n  render() {\n    const {\n      fullContainer,\n      fullContainer: {transforms = []},\n      localize: _,\n      container,\n      dataSourceOptions,\n    } = this.context;\n    const {children} = this.props;\n\n    const transformTypes = [\n      {label: _('Filter'), type: 'filter'},\n      {label: _('Split'), type: 'groupby'},\n      {label: _('Aggregate'), type: 'aggregate'},\n    ];\n\n    const transformableCharts = [\n      'scatter',\n      'bar',\n      'scattergl',\n      'histogram',\n      'histogram2d',\n      'box',\n      'violin',\n    ];\n\n    if (!transformableCharts.includes(fullContainer.type)) {\n      return (\n        <FoldEmpty\n          icon={PlotScatterIcon}\n          messagePrimary={_('No transforms available for this trace type')}\n        />\n      );\n    }\n\n    const transformBy =\n      container.transforms &&\n      container.transforms.map(tr => {\n        let foldNameSuffix = '';\n        if (tr.groupssrc) {\n          const groupssrc =\n            dataSourceOptions &&\n            dataSourceOptions.find(d => d.value === tr.groupssrc);\n          foldNameSuffix = `: ${\n            groupssrc && groupssrc.label ? groupssrc.label : tr.groupssrc\n          }`;\n        } else if (tr.targetsrc) {\n          const targetsrc =\n            dataSourceOptions &&\n            dataSourceOptions.find(d => d.value === tr.targetsrc);\n          foldNameSuffix = `: ${\n            targetsrc && targetsrc.label ? targetsrc.label : tr.targetsrc\n          }`;\n        }\n        return foldNameSuffix;\n      });\n\n    const filteredTransforms = transforms.filter(({type}) => Boolean(type));\n    const content =\n      filteredTransforms.length &&\n      filteredTransforms.map((tr, i) => (\n        <TransformFold\n          key={i}\n          transformIndex={i}\n          name={`${\n            transformTypes.filter(({type}) => type === tr.type)[0].label\n          }${transformBy && transformBy[i]}`}\n          canDelete={true}\n        >\n          {children}\n        </TransformFold>\n      ));\n\n    const addAction = {\n      label: _('Transform'),\n      handler: transformTypes.map(({label, type}) => {\n        return {\n          label,\n          handler: context => {\n            const {fullContainer, updateContainer} = context;\n            if (updateContainer) {\n              const transformIndex = Array.isArray(fullContainer.transforms)\n                ? fullContainer.transforms.length\n                : 0;\n              const key = `transforms[${transformIndex}]`;\n\n              const payload = {type};\n              if (type === 'filter') {\n                payload.targetsrc = null;\n              } else {\n                payload.groupssrc = null;\n                payload.groups = null;\n              }\n\n              updateContainer({[key]: payload});\n            }\n          },\n        };\n      }),\n    };\n\n    return (\n      <PlotlyPanel addAction={addAction}>\n        {content ? content : null}\n      </PlotlyPanel>\n    );\n  }\n}\n\nTransformAccordion.contextTypes = {\n  fullContainer: PropTypes.object,\n  localize: PropTypes.func,\n  container: PropTypes.object,\n  dataSourceOptions: PropTypes.array,\n};\n\nTransformAccordion.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default TransformAccordion;\n"]}