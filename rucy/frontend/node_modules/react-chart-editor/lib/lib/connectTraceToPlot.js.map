{"version":3,"sources":["../../src/lib/connectTraceToPlot.js"],"names":["connectTraceToPlot","WrappedComponent","TraceConnectedComponent","props","context","deleteTrace","bind","updateTrace","setLocals","nextProps","nextContext","traceIndexes","data","fullData","plotly","trace","length","fullTrace","i","_fullInput","index","transforms","every","t","type","childContext","getValObject","PlotSchema","getTraceValObject","attr","parts","updateContainer","deleteContainer","container","fullContainer","multiValuedContainer","forEach","Object","keys","key","searchArrays","defaultContainer","icon","name","update","onUpdate","UPDATE_TRACES","payload","DELETE_TRACE","displayName","propTypes","arrayOf","number","isRequired","contextTypes","array","object","func","childContextTypes","plotly_editor_traits"],"mappings":"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","file":"connectTraceToPlot.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport nestedProperty from 'plotly.js/src/lib/nested_property';\nimport {\n  getDisplayName,\n  plotlyTraceToCustomTrace,\n  renderTraceIcon,\n} from '../lib';\nimport {deepCopyPublic, setMultiValuedContainer} from './multiValues';\nimport {EDITOR_ACTIONS} from './constants';\n\nexport default function connectTraceToPlot(WrappedComponent) {\n  class TraceConnectedComponent extends Component {\n    constructor(props, context) {\n      super(props, context);\n\n      this.deleteTrace = this.deleteTrace.bind(this);\n      this.updateTrace = this.updateTrace.bind(this);\n      this.setLocals(props, context);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n      this.setLocals(nextProps, nextContext);\n    }\n\n    setLocals(props, context) {\n      const {traceIndexes} = props;\n      const {data, fullData, plotly} = context;\n\n      const trace = traceIndexes.length > 0 ? data[traceIndexes[0]] : {};\n\n      let fullTrace = {};\n      for (let i = 0; i < fullData.length; i++) {\n        if (traceIndexes[0] === fullData[i]._fullInput.index) {\n          /*\n           * Fit transforms are custom transforms in our custom plotly.js bundle,\n           * they are different from others as they create an extra trace in the\n           * data array. When plotly.js runs supplyTraceDefaults (before the\n           * transforms code executes) it stores the result in _fullInput,\n           * so that we have a reference to what the original, corrected input was.\n           * Then the transform code runs, our figure changes accordingly, but\n           * we're still able to use the original input as it's in _fullInput.\n           * This is the desired behaviour for our transforms usually,\n           * but it is not useful for fits, as the transform code adds some styles\n           * that are useful for the trace, so really for fits we'd like to read\n           * from _fullData, not _fullInput. Here we're setting _fullInput to\n           * _fullData as that is where the rest of our code expects to find its\n           * values.\n          */\n          if (\n            trace.transforms &&\n            trace.transforms.every(t => t.type === 'fit')\n          ) {\n            fullData[i]._fullInput = fullData[i];\n          }\n\n          fullTrace = fullData[i]._fullInput;\n\n          break;\n        }\n      }\n\n      this.childContext = {\n        getValObject: attr =>\n          !plotly\n            ? null\n            : plotly.PlotSchema.getTraceValObject(\n                fullTrace,\n                nestedProperty({}, attr).parts\n              ),\n        updateContainer: this.updateTrace,\n        deleteContainer: this.deleteTrace,\n        container: trace,\n        fullContainer: fullTrace,\n      };\n\n      if (traceIndexes.length > 1) {\n        const multiValuedContainer = deepCopyPublic(fullTrace);\n        fullData.forEach(t =>\n          Object.keys(t).forEach(key =>\n            setMultiValuedContainer(multiValuedContainer, t, key, {\n              searchArrays: true,\n            })\n          )\n        );\n        this.childContext.fullContainer = multiValuedContainer;\n        this.childContext.defaultContainer = fullTrace;\n        this.childContext.container = {};\n      }\n\n      if (trace && fullTrace) {\n        this.icon = renderTraceIcon(plotlyTraceToCustomTrace(trace));\n        this.name = fullTrace.name;\n      }\n    }\n\n    getChildContext() {\n      return this.childContext;\n    }\n\n    updateTrace(update) {\n      if (this.context.onUpdate) {\n        this.context.onUpdate({\n          type: EDITOR_ACTIONS.UPDATE_TRACES,\n          payload: {\n            update,\n            traceIndexes: this.props.traceIndexes,\n          },\n        });\n      }\n    }\n\n    deleteTrace() {\n      if (this.context.onUpdate) {\n        this.context.onUpdate({\n          type: EDITOR_ACTIONS.DELETE_TRACE,\n          payload: {traceIndexes: this.props.traceIndexes},\n        });\n      }\n    }\n\n    render() {\n      return (\n        <WrappedComponent name={this.name} icon={this.icon} {...this.props} />\n      );\n    }\n  }\n\n  TraceConnectedComponent.displayName = `TraceConnected${getDisplayName(\n    WrappedComponent\n  )}`;\n\n  TraceConnectedComponent.propTypes = {\n    traceIndexes: PropTypes.arrayOf(PropTypes.number).isRequired,\n  };\n\n  TraceConnectedComponent.contextTypes = {\n    fullData: PropTypes.array,\n    data: PropTypes.array,\n    plotly: PropTypes.object,\n    onUpdate: PropTypes.func,\n  };\n\n  TraceConnectedComponent.childContextTypes = {\n    getValObject: PropTypes.func,\n    updateContainer: PropTypes.func,\n    deleteContainer: PropTypes.func,\n    defaultContainer: PropTypes.object,\n    container: PropTypes.object,\n    fullContainer: PropTypes.object,\n  };\n\n  const {plotly_editor_traits} = WrappedComponent;\n  TraceConnectedComponent.plotly_editor_traits = plotly_editor_traits;\n\n  return TraceConnectedComponent;\n}\n"]}