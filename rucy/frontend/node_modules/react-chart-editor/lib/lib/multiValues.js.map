{"version":3,"sources":["../../src/lib/multiValues.js"],"names":["deepCopyPublic","value","skipPrivateKeys","key","startsWith","window","JSON","parse","stringify","setMultiValuedContainer","intoObj","fromObj","config","intoVal","fromVal","searchArrays","charAt","String","Array","isArray","i","length","Error","Object","keys","forEach","key2"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;AAKA,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChC,WAAOA,KAAP;AACD;;AAED,MAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAMF,KAAN;AAAA,WAAiBE,IAAIC,UAAJ,CAAe,GAAf,IAAsB,CAAtB,GAA0BH,KAA3C;AAAA,GAAxB;;AAEA,SAAOI,OAAOC,IAAP,CAAYC,KAAZ,CAAkBF,OAAOC,IAAP,CAAYE,SAAZ,CAAsBP,KAAtB,EAA6BC,eAA7B,CAAlB,CAAP;AACD;;AAED,SAASO,uBAAT,CAAiCC,OAAjC,EAA0CC,OAA1C,EAAmDR,GAAnD,EAAqE;AAAA,MAAbS,MAAa,uEAAJ,EAAI;;AACnE,MAAIC,UAAUH,QAAQP,GAAR,CAAd;AAAA,MACEW,UAAUH,QAAQR,GAAR,CADZ;;AAGA,MAAIY,eAAeH,OAAOG,YAA1B;;AAEA;AACA,MACG,OAAOZ,GAAP,KAAe,QAAf,IAA2BA,IAAIa,MAAJ,CAAW,CAAX,MAAkB,GAA9C,IACA,OAAOH,OAAP,KAAmB,UADnB,IAEAV,QAAQ,QAHV,EAIE;AACA;AACD;;AAED;AACA,MAAIU,mCAAJ,EAA8B;AAC5B;AACD,GAFD,MAEO,IAAIA,YAAY,KAAK,CAArB,EAAwB;AAC7B;AACA;AACA;AACA;AACA;AACAH,YAAQP,GAAR,IAAeW,OAAf;AACD,GAPM,MAOA,IAAIX,QAAQ,YAAZ,EAA0B;AAC/B;AACA;AACA;AACA,QAAIc,OAAOJ,OAAP,MAAoBI,OAAOH,OAAP,CAAxB,EAAyC;AACvCJ,cAAQP,GAAR;AACD;AACF,GAPM,MAOA,IAAIe,MAAMC,OAAN,CAAcN,OAAd,CAAJ,EAA4B;AACjC;AACA;AACA,QAAI,CAACE,YAAL,EAAmB;AACjB;AACD;AACD;AACA,SAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIN,QAAQO,MAA5B,EAAoCD,GAApC,EAAyC;AACvCX,8BAAwBI,OAAxB,EAAiCC,OAAjC,EAA0CM,CAA1C,EAA6CL,YAA7C;AACD;AACF,GAVM,MAUA,IAAI,wBAAcD,OAAd,CAAJ,EAA4B;AACjC;AACA,QAAI,CAAC,wBAAcD,OAAd,CAAL,EAA6B;AAC3B,YAAM,IAAIS,KAAJ,CAAU,4CAA4CnB,GAAtD,CAAN;AACD;AACDoB,WAAOC,IAAP,CAAYV,OAAZ,EAAqBW,OAArB,CAA6B,UAASC,IAAT,EAAe;AAC1CjB,8BAAwBI,OAAxB,EAAiCC,OAAjC,EAA0CY,IAA1C,EAAgDX,YAAhD;AACD,KAFD;AAGD,GARM,MAQA,IAAI,wBAAcF,OAAd,CAAJ,EAA4B;AACjC,UAAM,IAAIS,KAAJ,CAAU,4CAA4CnB,GAAtD,CAAN;AACD,GAFM,MAEA,IAAIU,YAAYC,OAAhB,EAAyB;AAC9B;AACAJ,YAAQP,GAAR;AACD;AACF;;QAEOH,c,GAAAA,c;QAAgBS,uB,GAAAA,uB","file":"multiValues.js","sourcesContent":["import {MULTI_VALUED} from './constants';\nimport {isPlainObject} from '../lib';\n\n/**\n * Deep-copies the value using JSON. Underscored (private) keys are removed.\n * @param {*} value Some nested value from the plotDiv object.\n * @returns {*} A deepcopy of the value.\n */\nfunction deepCopyPublic(value) {\n  if (typeof value === 'undefined') {\n    return value;\n  }\n\n  const skipPrivateKeys = (key, value) => (key.startsWith('_') ? 0 : value);\n\n  return window.JSON.parse(window.JSON.stringify(value, skipPrivateKeys));\n}\n\nfunction setMultiValuedContainer(intoObj, fromObj, key, config = {}) {\n  var intoVal = intoObj[key],\n    fromVal = fromObj[key];\n\n  var searchArrays = config.searchArrays;\n\n  // don't merge private attrs\n  if (\n    (typeof key === 'string' && key.charAt(0) === '_') ||\n    typeof intoVal === 'function' ||\n    key === 'module'\n  ) {\n    return;\n  }\n\n  // already a mixture of values, can't get any worse\n  if (intoVal === MULTI_VALUED) {\n    return;\n  } else if (intoVal === void 0) {\n    // if the original doesn't have the key it's because that key\n    // doesn't do anything there - so use the new value\n    // note that if fromObj doesn't have a key in intoObj we will not\n    // attempt to merge them at all, so this behavior makes the merge\n    // independent of order.\n    intoObj[key] = fromVal;\n  } else if (key === 'colorscale') {\n    // colorscales are arrays... need to stringify before comparing\n    // (other vals we don't want to stringify, as differences could\n    // potentially be real, like 'false' and false)\n    if (String(intoVal) !== String(fromVal)) {\n      intoObj[key] = MULTI_VALUED;\n    }\n  } else if (Array.isArray(intoVal)) {\n    // in data, other arrays are data, which we don't care about\n    // for styling purposes\n    if (!searchArrays) {\n      return;\n    }\n    // in layout though, we need to recurse into arrays\n    for (var i = 0; i < fromVal.length; i++) {\n      setMultiValuedContainer(intoVal, fromVal, i, searchArrays);\n    }\n  } else if (isPlainObject(fromVal)) {\n    // recurse into objects\n    if (!isPlainObject(intoVal)) {\n      throw new Error('tried to merge object into non-object: ' + key);\n    }\n    Object.keys(fromVal).forEach(function(key2) {\n      setMultiValuedContainer(intoVal, fromVal, key2, searchArrays);\n    });\n  } else if (isPlainObject(intoVal)) {\n    throw new Error('tried to merge non-object into object: ' + key);\n  } else if (intoVal !== fromVal) {\n    // different non-empty values -\n    intoObj[key] = MULTI_VALUED;\n  }\n}\n\nexport {deepCopyPublic, setMultiValuedContainer};\n"]}