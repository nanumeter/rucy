{"version":3,"sources":["../../src/lib/index.js"],"names":["PlotlyIcons","TOO_LIGHT_FACTOR","clamp","value","min","max","Math","getDisplayName","WrappedComponent","displayName","name","tooLight","color","hslColor","toHsl","l","renderTraceIcon","trace","prefix","componentName","PlotLineIcon","transpose","originalArray","every","Array","isArray","a","map","longestArrayItem","length","forEach","newArray","outerIndex","innerIndex","push","specialTableCase","traceType","srcAttributePath","some","endsWith","maybeTransposeData","data","isTransposable2DArray","includes","maybeAdjustSrc","src","config","fromSrc","axisIdToAxisName","bem","capitalize","lowerCase","upperCase","removeNonWord","camelCase","pascalCase","connectAnnotationToLayout","connectShapeToLayout","connectSliderToLayout","connectUpdateMenuToLayout","connectImageToLayout","connectAxesToLayout","connectLayoutToPlot","connectToContainer","connectRangeSelectorToAxis","connectTransformToTrace","connectAggregationToTransform","connectTraceToPlot","containerConnectedContextTypes","computeTraceOptionsFromSchema","traceTypeToPlotlyInitFigure","dereference","getAllAxes","getAxisTitle","isPlainObject","localize","localizeString","plotlyTraceToCustomTrace","unpackPlotProps","walkObject","striptags","traceTypeToAxisType"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;AACA;;;;AACA;;;;AACA;;;;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAIA;;IAAYA,W;;AACZ;;;;AACA;;;;;;AASA,IAAMC,mBAAmB,GAAzB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOC,KAAKD,GAAL,CAASD,GAAT,EAAcE,KAAKF,GAAL,CAASC,GAAT,EAAcF,KAAd,CAAd,CAAP;AACD;;AAED,SAASI,cAAT,CAAwBC,gBAAxB,EAA0C;AACxC,SAAOA,iBAAiBC,WAAjB,IAAgCD,iBAAiBE,IAAjD,IAAyD,WAAhE;AACD;;AAED,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAMC,WAAW,yBAAUD,KAAV,EAAiBE,KAAjB,EAAjB;AACA,SAAOD,SAASE,CAAT,GAAad,gBAApB;AACD;;AAED,SAASe,eAAT,CAAyBC,KAAzB,EAAiD;AAAA,MAAjBC,MAAiB,uEAAR,MAAQ;;AAC/C,MAAI,CAACD,KAAL,EAAY;AACV,WAAO,IAAP;AACD;AACD,MAAME,qBAAmBD,MAAnB,GAA4B,yBAAWD,KAAX,CAA5B,SAAN;AACA,SAAOjB,YAAYmB,aAAZ,IACHnB,YAAYmB,aAAZ,CADG,GAEHnB,YAAYoB,YAFhB;AAGD;;AAED,SAASC,SAAT,CAAmBC,aAAnB,EAAkC;AAChC;AACA,MAAIA,cAAcC,KAAd,CAAoB;AAAA,WAAK,CAACC,MAAMC,OAAN,CAAcC,CAAd,CAAN;AAAA,GAApB,CAAJ,EAAiD;AAC/C,WAAOJ,cAAcK,GAAd,CAAkB;AAAA,aAAK,CAACD,CAAD,CAAL;AAAA,KAAlB,CAAP;AACD;;AAED,MAAIE,mBAAmBJ,MAAMC,OAAN,CAAcH,cAAc,CAAd,CAAd,IACnBA,cAAc,CAAd,EAAiBO,MADE,GAEnB,CAFJ;;AAIAP,gBAAcQ,OAAd,CAAsB,aAAK;AACzB;AACA,QAAMD,SAASL,MAAMC,OAAN,CAAcC,CAAd,IAAmBA,EAAEG,MAArB,GAA8B,CAA7C;AACA,QAAIA,SAASD,gBAAb,EAA+B;AAC7BA,yBAAmBC,MAAnB;AACD;AACF,GAND;;AAQA,MAAME,WAAW,IAAIP,KAAJ,CAAUI,gBAAV,CAAjB;;AAEA,OAAK,IAAII,aAAa,CAAtB,EAAyBA,aAAaV,cAAcO,MAApD,EAA4DG,YAA5D,EAA0E;AACxE,QAAI,CAACR,MAAMC,OAAN,CAAcH,cAAcU,UAAd,CAAd,CAAL,EAA+C;AAC7CV,oBAAcU,UAAd,IAA4B,CAACV,cAAcU,UAAd,CAAD,CAA5B;AACD;;AAED,SAAK,IAAIC,aAAa,CAAtB,EAAyBA,aAAaL,gBAAtC,EAAwDK,YAAxD,EAAsE;AACpE;AACA,UAAI,CAACT,MAAMC,OAAN,CAAcM,SAASE,UAAT,CAAd,CAAL,EAA0C;AACxCF,iBAASE,UAAT,IAAuB,EAAvB;AACD;;AAED,UAAM9B,QACJ,OAAOmB,cAAcU,UAAd,EAA0BC,UAA1B,CAAP,KAAiD,WAAjD,GACIX,cAAcU,UAAd,EAA0BC,UAA1B,CADJ,GAEI,IAHN;AAIAF,eAASE,UAAT,EAAqBC,IAArB,CAA0B/B,KAA1B;AACD;AACF;;AAED,SAAO4B,QAAP;AACD;;AAED,IAAMI,mBAAmB,SAAnBA,gBAAmB,CAACC,SAAD,EAAYC,gBAAZ,EAAiC;AACxD;;;;;;;;;AASA,SACED,cAAc,OAAd,IACA,CACE,kBADF,EAEE,sBAFF,EAGE,qBAHF,EAIE,sBAJF,EAKE,gBALF,EAMEE,IANF,CAMO;AAAA,WAAKD,iBAAiBE,QAAjB,CAA0Bb,CAA1B,CAAL;AAAA,GANP,CAFF;AAUD,CApBD;;AAsBA,SAASc,kBAAT,CAA4BC,IAA5B,EAAkCJ,gBAAlC,EAAoDD,SAApD,EAA+D;AAC7D,MAAI,CAACK,IAAD,IAAUjB,MAAMC,OAAN,CAAcgB,IAAd,KAAuBA,KAAKZ,MAAL,KAAgB,CAArD,EAAyD;AACvD,WAAO,IAAP;AACD;;AAED,MAAMa,wBACJL,iBAAiBE,QAAjB,CAA0B,MAA1B,KACA,CACE,SADF,EAEE,WAFF,EAGE,SAHF,EAIE,WAJF,EAKE,SALF,EAME,QANF,EAOE,eAPF,EAQEI,QARF,CAQWP,SARX,CAFF;;AAYA,MAAIM,qBAAJ,EAA2B;AACzB,WAAOrB,UAAUoB,IAAV,CAAP;AACD;;AAED,MACEN,iBAAiBC,SAAjB,EAA4BC,gBAA5B,KACAb,MAAMC,OAAN,CAAcgB,KAAK,CAAL,CAAd,CADA,IAEAA,KAAKZ,MAAL,KAAgB,CAHlB,EAIE;AACA,WAAOY,KAAK,CAAL,CAAP;AACD;;AAED,SAAOA,IAAP;AACD;;AAED,SAASG,cAAT,CAAwBC,GAAxB,EAA6BR,gBAA7B,EAA+CD,SAA/C,EAA0DU,MAA1D,EAAkE;AAChE,MAAI,CAACD,GAAD,IAASrB,MAAMC,OAAN,CAAcoB,GAAd,KAAsBA,IAAIhB,MAAJ,KAAe,CAAlD,EAAsD;AACpD,WAAO,IAAP;AACD;;AAED,MAAIM,iBAAiBC,SAAjB,EAA4BC,gBAA5B,KAAiDQ,IAAIhB,MAAJ,KAAe,CAApE,EAAuE;AACrE,WAAOgB,IAAI,CAAJ,CAAP;AACD;;AAED,SAAOC,UAAUA,OAAOC,OAAjB,GAA2BD,OAAOC,OAAP,CAAeF,GAAf,EAAoBT,SAApB,CAA3B,GAA4DS,GAAnE;AACD;;QAGCG,gB;QACAC,G;QACAC,U;QACAC,S;QACAC,S;QACAC,a;QACAC,S;QACAC,U;QACArD,K,GAAAA,K;QACAsD,yB;QACAC,oB;QACAC,qB;QACAC,yB;QACAC,oB;QACAC,mB;QACAC,mB;QACAC,kB;QACAC,0B;QACAC,uB;QACAC,6B;QACAC,kB;QACAC,8B;QACAC,6B;QACAC,2B;QACAC,W;QACAC,U;QACAC,Y;QACAlE,c,GAAAA,c;QACAmE,a;QACAC,Q;QACAC,c;QACAhC,c,GAAAA,c;QACAJ,kB,GAAAA,kB;QACAqC,wB;QACA7D,e,GAAAA,e;QACA8D,e;QACAC,U;QACApE,Q,GAAAA,Q;QACAqE,S;QACAC,mB;QACA5D,S,GAAAA,S","file":"index.js","sourcesContent":["import bem from './bem';\nimport connectAnnotationToLayout from './connectAnnotationToLayout';\nimport connectShapeToLayout from './connectShapeToLayout';\nimport connectSliderToLayout from './connectSliderToLayout';\nimport connectImageToLayout from './connectImageToLayout';\nimport connectUpdateMenuToLayout from './connectUpdateMenuToLayout';\nimport connectRangeSelectorToAxis from './connectRangeSelectorToAxis';\nimport connectTransformToTrace from './connectTransformToTrace';\nimport connectAggregationToTransform from './connectAggregationToTransform';\nimport connectAxesToLayout from './connectAxesToLayout';\nimport connectLayoutToPlot from './connectLayoutToPlot';\nimport connectToContainer, {\n  containerConnectedContextTypes,\n} from './connectToContainer';\nimport {computeTraceOptionsFromSchema} from './computeTraceOptionsFromSchema';\nimport connectTraceToPlot from './connectTraceToPlot';\nimport dereference from './dereference';\nimport getAllAxes, {\n  axisIdToAxisName,\n  traceTypeToAxisType,\n  getAxisTitle,\n} from './getAllAxes';\nimport localize, {localizeString} from './localize';\nimport tinyColor from 'tinycolor2';\nimport unpackPlotProps from './unpackPlotProps';\nimport walkObject, {isPlainObject} from './walkObject';\nimport {\n  traceTypeToPlotlyInitFigure,\n  plotlyTraceToCustomTrace,\n} from './customTraceType';\nimport * as PlotlyIcons from 'plotly-icons';\nimport striptags from './striptags';\nimport {\n  capitalize,\n  lowerCase,\n  upperCase,\n  removeNonWord,\n  camelCase,\n  pascalCase,\n} from './strings';\n\nconst TOO_LIGHT_FACTOR = 0.8;\n\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nfunction tooLight(color) {\n  const hslColor = tinyColor(color).toHsl();\n  return hslColor.l > TOO_LIGHT_FACTOR;\n}\n\nfunction renderTraceIcon(trace, prefix = 'Plot') {\n  if (!trace) {\n    return null;\n  }\n  const componentName = `${prefix}${pascalCase(trace)}Icon`;\n  return PlotlyIcons[componentName]\n    ? PlotlyIcons[componentName]\n    : PlotlyIcons.PlotLineIcon;\n}\n\nfunction transpose(originalArray) {\n  // if we want to transpose a uni dimensional array\n  if (originalArray.every(a => !Array.isArray(a))) {\n    return originalArray.map(a => [a]);\n  }\n\n  let longestArrayItem = Array.isArray(originalArray[0])\n    ? originalArray[0].length\n    : 1;\n\n  originalArray.forEach(a => {\n    // if it's not an array, it's a string\n    const length = Array.isArray(a) ? a.length : 1;\n    if (length > longestArrayItem) {\n      longestArrayItem = length;\n    }\n  });\n\n  const newArray = new Array(longestArrayItem);\n\n  for (let outerIndex = 0; outerIndex < originalArray.length; outerIndex++) {\n    if (!Array.isArray(originalArray[outerIndex])) {\n      originalArray[outerIndex] = [originalArray[outerIndex]];\n    }\n\n    for (let innerIndex = 0; innerIndex < longestArrayItem; innerIndex++) {\n      // ensure we have an array to push to\n      if (!Array.isArray(newArray[innerIndex])) {\n        newArray[innerIndex] = [];\n      }\n\n      const value =\n        typeof originalArray[outerIndex][innerIndex] !== 'undefined'\n          ? originalArray[outerIndex][innerIndex]\n          : null;\n      newArray[innerIndex].push(value);\n    }\n  }\n\n  return newArray;\n}\n\nconst specialTableCase = (traceType, srcAttributePath) => {\n  /* Just more user friendly\n   * Table traces have many configuration options,\n   * The below attributes can be 2d or 1d and will affect the plot differently\n   * EX:\n   * header.values = ['Jan', 'Feb', 'Mar'] => will put data in a row\n   * header.values = [['Jan', 1], ['Feb', 2], ['Mar', 3]] => will create 3 columns\n   * 1d arrays affect columns\n   * 2d arrays affect rows within each column\n   */\n  return (\n    traceType === 'table' &&\n    [\n      'header.valuessrc',\n      'header.font.colorsrc',\n      'header.font.sizesrc',\n      'header.fill.colorsrc',\n      'columnwidthsrc',\n    ].some(a => srcAttributePath.endsWith(a))\n  );\n};\n\nfunction maybeTransposeData(data, srcAttributePath, traceType) {\n  if (!data || (Array.isArray(data) && data.length === 0)) {\n    return null;\n  }\n\n  const isTransposable2DArray =\n    srcAttributePath.endsWith('zsrc') &&\n    [\n      'contour',\n      'contourgl',\n      'heatmap',\n      'heatmapgl',\n      'surface',\n      'carpet',\n      'contourcarpet',\n    ].includes(traceType);\n\n  if (isTransposable2DArray) {\n    return transpose(data);\n  }\n\n  if (\n    specialTableCase(traceType, srcAttributePath) &&\n    Array.isArray(data[0]) &&\n    data.length === 1\n  ) {\n    return data[0];\n  }\n\n  return data;\n}\n\nfunction maybeAdjustSrc(src, srcAttributePath, traceType, config) {\n  if (!src || (Array.isArray(src) && src.length === 0)) {\n    return null;\n  }\n\n  if (specialTableCase(traceType, srcAttributePath) && src.length === 1) {\n    return src[0];\n  }\n\n  return config && config.fromSrc ? config.fromSrc(src, traceType) : src;\n}\n\nexport {\n  axisIdToAxisName,\n  bem,\n  capitalize,\n  lowerCase,\n  upperCase,\n  removeNonWord,\n  camelCase,\n  pascalCase,\n  clamp,\n  connectAnnotationToLayout,\n  connectShapeToLayout,\n  connectSliderToLayout,\n  connectUpdateMenuToLayout,\n  connectImageToLayout,\n  connectAxesToLayout,\n  connectLayoutToPlot,\n  connectToContainer,\n  connectRangeSelectorToAxis,\n  connectTransformToTrace,\n  connectAggregationToTransform,\n  connectTraceToPlot,\n  containerConnectedContextTypes,\n  computeTraceOptionsFromSchema,\n  traceTypeToPlotlyInitFigure,\n  dereference,\n  getAllAxes,\n  getAxisTitle,\n  getDisplayName,\n  isPlainObject,\n  localize,\n  localizeString,\n  maybeAdjustSrc,\n  maybeTransposeData,\n  plotlyTraceToCustomTrace,\n  renderTraceIcon,\n  unpackPlotProps,\n  walkObject,\n  tooLight,\n  striptags,\n  traceTypeToAxisType,\n  transpose,\n};\n"]}