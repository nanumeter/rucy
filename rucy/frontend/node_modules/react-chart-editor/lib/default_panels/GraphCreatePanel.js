'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _components = require('../components');

var _derived = require('../components/fields/derived');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GraphCreatePanel = function GraphCreatePanel(props, _ref) {
  var _ = _ref.localize;

  return _react2.default.createElement(
    _components.TraceAccordion,
    { canAdd: true, excludeFits: true },
    _react2.default.createElement(_components.TextEditor, { label: _('Name'), attr: 'name', richTextOnly: true }),
    _react2.default.createElement(_components.TraceSelector, { label: _('Type'), attr: 'type', show: true }),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Data') },
      _react2.default.createElement(_components.DataSelector, { label: _('Labels'), attr: 'labels' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Values'), attr: 'values' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Locations'), attr: 'locations' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Latitude'), attr: 'lat' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Longitude'), attr: 'lon' }),
      _react2.default.createElement(_components.Radio, {
        label: _('Orientation'),
        attr: 'orientation',
        options: [{ label: _('Vertical'), value: 'v' }, { label: _('Horizontal'), value: 'h' }]
      }),
      _react2.default.createElement(_components.DataSelector, {
        label: {
          histogram2d: _('X Values'),
          histogram: _('X Values'),
          '*': _('X')
        },
        attr: 'x'
      }),
      _react2.default.createElement(_components.DataSelector, {
        label: {
          histogram2d: _('Y Values'),
          histogram: _('Y Values'),
          '*': _('Y')
        },
        attr: 'y'
      }),
      _react2.default.createElement(_components.DataSelector, {
        label: {
          choropleth: _('Values'),
          histogram2d: _('Z Values'),
          '*': _('Z')
        },
        attr: 'z'
      }),
      _react2.default.createElement(
        _derived.HistogramInfoVertical,
        null,
        _('Note: in vertical orientation, X values are used for bins and Y values for weights.')
      ),
      _react2.default.createElement(
        _derived.HistogramInfoHorizontal,
        null,
        _('Note: in horizontal orientation, Y Values are used for bins and X values for weights.')
      ),
      _react2.default.createElement(_components.DataSelector, { label: _('I (Optional)'), attr: 'i' }),
      _react2.default.createElement(_components.DataSelector, { label: _('J (Optional)'), attr: 'j' }),
      _react2.default.createElement(_components.DataSelector, { label: _('K (Optional)'), attr: 'k' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Open'), attr: 'open' }),
      _react2.default.createElement(_components.DataSelector, { label: _('High'), attr: 'high' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Low'), attr: 'low' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Close'), attr: 'close' }),
      _react2.default.createElement(_components.DataSelector, { label: _('A'), attr: 'a' }),
      _react2.default.createElement(_components.DataSelector, { label: _('B'), attr: 'b' }),
      _react2.default.createElement(_components.DataSelector, { label: _('C'), attr: 'c' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Headers'), attr: 'header.values' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Columns'), attr: 'cells.values' })
    ),
    _react2.default.createElement(
      _components.TraceTypeSection,
      {
        name: _('Data'),
        traceTypes: ['scatterpolar', 'scatterpolargl']
      },
      _react2.default.createElement(_components.DataSelector, { label: _('Radius'), attr: 'r' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Theta'), attr: 'theta' }),
      _react2.default.createElement(_components.Dropdown, {
        label: _('Theta Unit'),
        options: [{ label: _('Radians'), value: 'radians' }, { label: _('Degrees'), value: 'degrees' }, { label: _('Gradians'), value: 'gradians' }],
        attr: 'thetaunit',
        clearable: false
      })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Axes to Use') },
      _react2.default.createElement(_components.AxisCreator, { attr: 'fake_attr' })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Error Bars X') },
      _react2.default.createElement(_components.ErrorBars, { attr: 'error_x' })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Error Bars Y') },
      _react2.default.createElement(_components.ErrorBars, { attr: 'error_y' })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Error Bars Z') },
      _react2.default.createElement(_components.ErrorBars, { attr: 'error_z' })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Header Options') },
      _react2.default.createElement(_components.DataSelector, { label: _('Fill Color'), attr: 'header.fill.color' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Font Color'), attr: 'header.font.color' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Font Size'), attr: 'header.font.size' })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Cell Options') },
      _react2.default.createElement(_components.DataSelector, { label: _('Fill Color'), attr: 'cells.fill.color' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Font Color'), attr: 'cells.font.color' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Font Size'), attr: 'cells.font.size' })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Column Options') },
      _react2.default.createElement(_components.DataSelector, { label: _('Width'), attr: 'columnwidth' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Order'), attr: 'columnorder' })
    ),
    _react2.default.createElement(
      _components.PlotlySection,
      { name: _('Options') },
      _react2.default.createElement(_components.DataSelector, { label: _('Intensity'), attr: 'intensity' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Facecolor'), attr: 'facecolor' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Vertexcolor'), attr: 'vertexcolor' }),
      _react2.default.createElement(_components.Dropdown, {
        label: _('Location Format'),
        attr: 'locationmode',
        clearable: false,
        options: [{ label: _('Country Names'), value: 'country names' }, { label: _('Country Abbreviations (ISO-3)'), value: 'ISO-3' }, {
          label: _('USA State Abbreviations (e.g. NY)'),
          value: 'USA-states'
        }]
      }),
      _react2.default.createElement(
        _components.LayoutSection,
        null,
        _react2.default.createElement(_components.Dropdown, {
          label: _('Map Region'),
          attr: 'geo.scope',
          options: [{ label: _('World'), value: 'world' }, { label: _('USA'), value: 'usa' }, { label: _('Europe'), value: 'europe' }, { label: _('Asia'), value: 'asia' }, { label: _('Africa'), value: 'africa' }, { label: _('North America'), value: 'north america' }, { label: _('South America'), value: 'south america' }],
          clearable: false
        }),
        _react2.default.createElement(_components.Dropdown, {
          label: _('Projection'),
          attr: 'geo.projection.type',
          clearable: false,
          options: [{ label: _('Equirectangular'), value: 'equirectangular' }, { label: _('Mercator'), value: 'mercator' }, { label: _('Orthographic'), value: 'orthographic' }, { label: _('Natural Earth'), value: 'natural earth' }, { label: _('Albers USA'), value: 'albers usa' }, { label: _('Winkel Tripel'), value: 'winkel tripel' }, { label: _('Robinson'), value: 'robinson' }, { label: _('Miller'), value: 'miller' }, { label: _('Kavrayskiy 7'), value: 'kavrayskiy7' }, { label: _('Eckert 4'), value: 'eckert4' }, { label: _('Azimuthal Equal Area'), value: 'azimuthal equal area' }, {
            label: _('Azimuthal Equidistant'),
            value: 'azimuthal equidistant'
          }, { label: _('Conic Equal Area'), value: 'conic equal area' }, { label: _('Conic Conformal'), value: 'conic conformal' }, { label: _('Conic Equidistant'), value: 'conic equidistant' }, { label: _('Gnomonic'), value: 'gnomonic' }, { label: _('Stereographic'), value: 'stereographic' }, { label: _('Mollweide'), value: 'mollweide' }, { label: _('Hammer'), value: 'hammer' }, { label: _('Transverse Mercator'), value: 'transverse mercator' }, { label: _('Aitoff'), value: 'aitoff' }, { label: _('Sinusoidal'), value: 'sinusoidal' }]
        })
      ),
      _react2.default.createElement(_components.Numeric, { label: _('Sum'), step: 10, attr: 'sum' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Text'), attr: 'text' }),
      _react2.default.createElement(_components.DataSelector, { label: _('Color'), attr: 'marker.color' }),
      _react2.default.createElement(_components.DataSelector, { label: 'Colors', attr: 'marker.colors' }),
      _react2.default.createElement(_components.Radio, {
        label: _('Transpose'),
        attr: 'transpose',
        options: [{ label: _('No'), value: false }, { label: _('Yes'), value: true }]
      })
    )
  );
};

exports.default = GraphCreatePanel;

GraphCreatePanel.contextTypes = {
  localize: _propTypes2.default.func
};
//# sourceMappingURL=GraphCreatePanel.js.map